'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

const defaultOptions = {
    botStyle: 'Circle',
    circleColor: 'BlueGrey300',
    topType: 'Bulb02',
    topColor: 'BlueGrey500',
    faceType: 'Square01',
    faceColor: 'BlueGrey500',
    textureType: 'None',
    eyeType: 'Round',
    mouthType: 'Square01',
    sideType: 'Square',
    sidesColor: 'BlueGrey500',
};
const BotContext = react.createContext(null);
function BotProvider({ children, initialOptions = {}, }) {
    const [options, setOptions] = react.useState({
        ...defaultOptions,
        ...initialOptions,
    });
    // Update options when initialOptions change (for Storybook controls)
    react.useEffect(() => {
        setOptions({
            ...defaultOptions,
            ...initialOptions,
        });
    }, [initialOptions]);
    const updateOptions = react.useCallback((updates) => {
        setOptions(prev => ({ ...prev, ...updates }));
    }, []);
    const resetOptions = react.useCallback(() => {
        setOptions(defaultOptions);
    }, []);
    const value = {
        ...options,
        updateOptions,
        resetOptions,
    };
    return jsxRuntime.jsx(BotContext.Provider, { value: value, children: children });
}
function useBotContext() {
    const context = react.useContext(BotContext);
    if (!context) {
        throw new Error('useBotContext must be used within a BotProvider');
    }
    return context;
}

const TextureNone = ({ id, maskId }) => (jsxRuntime.jsx("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" }));
const TextureCircuits = ({ id, maskId }) => (jsxRuntime.jsxs("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M72.4160437,34 L23,34 L19,34 L19,0 L23,0 L23,30 L72.4160437,30 C73.1876003,28.2340952 74.949681,27 77,27 C79.7614237,27 82,29.2385763 82,32 C82,34.7614237 79.7614237,37 77,37 C74.949681,37 73.1876003,35.7659048 72.4160437,34 Z M11,0 L15,0 L15,18 L11,18 L11,0 Z", id: "Beep-Boop", fillOpacity: "0.1", fill: "#000000" }), jsxRuntime.jsx("path", { d: "M122,34.5839563 L122,60 L141,60 L141,64 L122,64 L118,64 L118,34.5839563 C116.234095,33.8123997 115,32.050319 115,30 C115,27.2385763 117.238576,25 120,25 C122.761424,25 125,27.2385763 125,30 C125,32.050319 123.765905,33.8123997 122,34.5839563 Z", id: "Beep-Boop", fillOpacity: "0.2", fill: "#FFFFFF" }), jsxRuntime.jsx("path", { d: "M114,68 L141,68 L141,72 L114,72 L110,72 L110,46 L114,46 L114,68 Z", id: "Beep-Boop", fillOpacity: "0.2", fill: "#000000" }), jsxRuntime.jsx("path", { d: "M15,103.583956 L15,129 L34,129 L34,133 L15,133 L11,133 L11,103.583956 C9.23409522,102.8124 8,101.050319 8,99 C8,96.2385763 10.2385763,94 13,94 C15.7614237,94 18,96.2385763 18,99 C18,101.050319 16.7659048,102.8124 15,103.583956 Z", id: "Beep-Boop", fillOpacity: "0.2", fill: "#000000", transform: "translate(21.000000, 113.500000) scale(-1, 1) translate(-21.000000, -113.500000)" })] }));
const TextureDots = ({ id, maskId }) => (jsxRuntime.jsxs("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M33.6,96.7586207 C32.440202,96.7586207 31.5,95.8168748 31.5,94.6551724 C31.5,93.49347 32.440202,92.5517241 33.6,92.5517241 C34.759798,92.5517241 35.7,93.49347 35.7,94.6551724 C35.7,95.8168748 34.759798,96.7586207 33.6,96.7586207 Z M33.6,84.137931 C32.440202,84.137931 31.5,83.1961852 31.5,82.0344828 C31.5,80.8727804 32.440202,79.9310345 33.6,79.9310345 C34.759798,79.9310345 35.7,80.8727804 35.7,82.0344828 C35.7,83.1961852 34.759798,84.137931 33.6,84.137931 Z M34.1,109.206897 C32.940202,109.206897 32,108.265151 32,107.103448 C32,105.941746 32.940202,105 34.1,105 C35.259798,105 36.2,105.941746 36.2,107.103448 C36.2,108.265151 35.259798,109.206897 34.1,109.206897 Z M47.1,109.206897 C45.940202,109.206897 45,108.265151 45,107.103448 C45,105.941746 45.940202,105 47.1,105 C48.259798,105 49.2,105.941746 49.2,107.103448 C49.2,108.265151 48.259798,109.206897 47.1,109.206897 Z M27.3,90.4482759 C26.140202,90.4482759 25.2,89.50653 25.2,88.3448276 C25.2,87.1831252 26.140202,86.2413793 27.3,86.2413793 C28.459798,86.2413793 29.4,87.1831252 29.4,88.3448276 C29.4,89.50653 28.459798,90.4482759 27.3,90.4482759 Z M27.1,103.206897 C25.940202,103.206897 25,102.265151 25,101.103448 C25,99.9417459 25.940202,99 27.1,99 C28.259798,99 29.2,99.9417459 29.2,101.103448 C29.2,102.265151 28.259798,103.206897 27.1,103.206897 Z M51.1,103.206897 C49.940202,103.206897 49,102.265151 49,101.103448 C49,99.9417459 49.940202,99 51.1,99 C52.259798,99 53.2,99.9417459 53.2,101.103448 C53.2,102.265151 52.259798,103.206897 51.1,103.206897 Z M39.9,90.4482759 C38.740202,90.4482759 37.8,89.50653 37.8,88.3448276 C37.8,87.1831252 38.740202,86.2413793 39.9,86.2413793 C41.059798,86.2413793 42,87.1831252 42,88.3448276 C42,89.50653 41.059798,90.4482759 39.9,90.4482759 Z M39.9,103.068966 C38.740202,103.068966 37.8,102.12722 37.8,100.965517 C37.8,99.8038148 38.740202,98.862069 39.9,98.862069 C41.059798,98.862069 42,99.8038148 42,100.965517 C42,102.12722 41.059798,103.068966 39.9,103.068966 Z M33.6,71.5172414 C32.440202,71.5172414 31.5,70.5754955 31.5,69.4137931 C31.5,68.2520907 32.440202,67.3103448 33.6,67.3103448 C34.759798,67.3103448 35.7,68.2520907 35.7,69.4137931 C35.7,70.5754955 34.759798,71.5172414 33.6,71.5172414 Z M27.3,65.2068966 C26.140202,65.2068966 25.2,64.2651507 25.2,63.1034483 C25.2,61.9417459 26.140202,61 27.3,61 C28.459798,61 29.4,61.9417459 29.4,63.1034483 C29.4,64.2651507 28.459798,65.2068966 27.3,65.2068966 Z M27.3,77.8275862 C26.140202,77.8275862 25.2,76.8858403 25.2,75.7241379 C25.2,74.5624355 26.140202,73.6206897 27.3,73.6206897 C28.459798,73.6206897 29.4,74.5624355 29.4,75.7241379 C29.4,76.8858403 28.459798,77.8275862 27.3,77.8275862 Z M39.9,77.8275862 C38.740202,77.8275862 37.8,76.8858403 37.8,75.7241379 C37.8,74.5624355 38.740202,73.6206897 39.9,73.6206897 C41.059798,73.6206897 42,74.5624355 42,75.7241379 C42,76.8858403 41.059798,77.8275862 39.9,77.8275862 Z M8.4,96.7586207 C7.24020203,96.7586207 6.3,95.8168748 6.3,94.6551724 C6.3,93.49347 7.24020203,92.5517241 8.4,92.5517241 C9.55979797,92.5517241 10.5,93.49347 10.5,94.6551724 C10.5,95.8168748 9.55979797,96.7586207 8.4,96.7586207 Z M8.4,84.137931 C7.24020203,84.137931 6.3,83.1961852 6.3,82.0344828 C6.3,80.8727804 7.24020203,79.9310345 8.4,79.9310345 C9.55979797,79.9310345 10.5,80.8727804 10.5,82.0344828 C10.5,83.1961852 9.55979797,84.137931 8.4,84.137931 Z M8.4,109.37931 C7.24020203,109.37931 6.3,108.437564 6.3,107.275862 C6.3,106.11416 7.24020203,105.172414 8.4,105.172414 C9.55979797,105.172414 10.5,106.11416 10.5,107.275862 C10.5,108.437564 9.55979797,109.37931 8.4,109.37931 Z M2.1,90.4482759 C0.940202025,90.4482759 0,89.50653 0,88.3448276 C0,87.1831252 0.940202025,86.2413793 2.1,86.2413793 C3.25979797,86.2413793 4.2,87.1831252 4.2,88.3448276 C4.2,89.50653 3.25979797,90.4482759 2.1,90.4482759 Z M2.1,103.068966 C0.940202025,103.068966 0,102.12722 0,100.965517 C0,99.8038148 0.940202025,98.862069 2.1,98.862069 C3.25979797,98.862069 4.2,99.8038148 4.2,100.965517 C4.2,102.12722 3.25979797,103.068966 2.1,103.068966 Z M14.7,90.4482759 C13.540202,90.4482759 12.6,89.50653 12.6,88.3448276 C12.6,87.1831252 13.540202,86.2413793 14.7,86.2413793 C15.859798,86.2413793 16.8,87.1831252 16.8,88.3448276 C16.8,89.50653 15.859798,90.4482759 14.7,90.4482759 Z M14.7,103.068966 C13.540202,103.068966 12.6,102.12722 12.6,100.965517 C12.6,99.8038148 13.540202,98.862069 14.7,98.862069 C15.859798,98.862069 16.8,99.8038148 16.8,100.965517 C16.8,102.12722 15.859798,103.068966 14.7,103.068966 Z M8.4,71.5172414 C7.24020203,71.5172414 6.3,70.5754955 6.3,69.4137931 C6.3,68.2520907 7.24020203,67.3103448 8.4,67.3103448 C9.55979797,67.3103448 10.5,68.2520907 10.5,69.4137931 C10.5,70.5754955 9.55979797,71.5172414 8.4,71.5172414 Z M2.1,77.8275862 C0.940202025,77.8275862 0,76.8858403 0,75.7241379 C0,74.5624355 0.940202025,73.6206897 2.1,73.6206897 C3.25979797,73.6206897 4.2,74.5624355 4.2,75.7241379 C4.2,76.8858403 3.25979797,77.8275862 2.1,77.8275862 Z M14.7,65.2068966 C13.540202,65.2068966 12.6,64.2651507 12.6,63.1034483 C12.6,61.9417459 13.540202,61 14.7,61 C15.859798,61 16.8,61.9417459 16.8,63.1034483 C16.8,64.2651507 15.859798,65.2068966 14.7,65.2068966 Z M14.7,77.8275862 C13.540202,77.8275862 12.6,76.8858403 12.6,75.7241379 C12.6,74.5624355 13.540202,73.6206897 14.7,73.6206897 C15.859798,73.6206897 16.8,74.5624355 16.8,75.7241379 C16.8,76.8858403 15.859798,77.8275862 14.7,77.8275862 Z M21,96.7586207 C19.840202,96.7586207 18.9,95.8168748 18.9,94.6551724 C18.9,93.49347 19.840202,92.5517241 21,92.5517241 C22.159798,92.5517241 23.1,93.49347 23.1,94.6551724 C23.1,95.8168748 22.159798,96.7586207 21,96.7586207 Z M21,84.137931 C19.840202,84.137931 18.9,83.1961852 18.9,82.0344828 C18.9,80.8727804 19.840202,79.9310345 21,79.9310345 C22.159798,79.9310345 23.1,80.8727804 23.1,82.0344828 C23.1,83.1961852 22.159798,84.137931 21,84.137931 Z M21,109.37931 C19.840202,109.37931 18.9,108.437564 18.9,107.275862 C18.9,106.11416 19.840202,105.172414 21,105.172414 C22.159798,105.172414 23.1,106.11416 23.1,107.275862 C23.1,108.437564 22.159798,109.37931 21,109.37931 Z M33.6,122 C32.440202,122 31.5,121.058254 31.5,119.896552 C31.5,118.734849 32.440202,117.793103 33.6,117.793103 C34.759798,117.793103 35.7,118.734849 35.7,119.896552 C35.7,121.058254 34.759798,122 33.6,122 Z M27.3,115.689655 C26.140202,115.689655 25.2,114.747909 25.2,113.586207 C25.2,112.424504 26.140202,111.482759 27.3,111.482759 C28.459798,111.482759 29.4,112.424504 29.4,113.586207 C29.4,114.747909 28.459798,115.689655 27.3,115.689655 Z M39.9,115.689655 C38.740202,115.689655 37.8,114.747909 37.8,113.586207 C37.8,112.424504 38.740202,111.482759 39.9,111.482759 C41.059798,111.482759 42,112.424504 42,113.586207 C42,114.747909 41.059798,115.689655 39.9,115.689655 Z M8.4,122 C7.24020203,122 6.3,121.058254 6.3,119.896552 C6.3,118.734849 7.24020203,117.793103 8.4,117.793103 C9.55979797,117.793103 10.5,118.734849 10.5,119.896552 C10.5,121.058254 9.55979797,122 8.4,122 Z M2.1,115.689655 C0.940202025,115.689655 0,114.747909 0,113.586207 C0,112.424504 0.940202025,111.482759 2.1,111.482759 C3.25979797,111.482759 4.2,112.424504 4.2,113.586207 C4.2,114.747909 3.25979797,115.689655 2.1,115.689655 Z M14.7,115.689655 C13.540202,115.689655 12.6,114.747909 12.6,113.586207 C12.6,112.424504 13.540202,111.482759 14.7,111.482759 C15.859798,111.482759 16.8,112.424504 16.8,113.586207 C16.8,114.747909 15.859798,115.689655 14.7,115.689655 Z M21,122 C19.840202,122 18.9,121.058254 18.9,119.896552 C18.9,118.734849 19.840202,117.793103 21,117.793103 C22.159798,117.793103 23.1,118.734849 23.1,119.896552 C23.1,121.058254 22.159798,122 21,122 Z M21,71.5172414 C19.840202,71.5172414 18.9,70.5754955 18.9,69.4137931 C18.9,68.2520907 19.840202,67.3103448 21,67.3103448 C22.159798,67.3103448 23.1,68.2520907 23.1,69.4137931 C23.1,70.5754955 22.159798,71.5172414 21,71.5172414 Z", id: "dots", fillOpacity: "0.2", fill: "#000000", fillRule: "nonzero" }), jsxRuntime.jsx("path", { d: "M123.6,35.7586207 C122.440202,35.7586207 121.5,34.8168748 121.5,33.6551724 C121.5,32.49347 122.440202,31.5517241 123.6,31.5517241 C124.759798,31.5517241 125.7,32.49347 125.7,33.6551724 C125.7,34.8168748 124.759798,35.7586207 123.6,35.7586207 Z M123.6,23.137931 C122.440202,23.137931 121.5,22.1961852 121.5,21.0344828 C121.5,19.8727804 122.440202,18.9310345 123.6,18.9310345 C124.759798,18.9310345 125.7,19.8727804 125.7,21.0344828 C125.7,22.1961852 124.759798,23.137931 123.6,23.137931 Z M123.6,48.3793103 C122.440202,48.3793103 121.5,47.4375645 121.5,46.2758621 C121.5,45.1141597 122.440202,44.1724138 123.6,44.1724138 C124.759798,44.1724138 125.7,45.1141597 125.7,46.2758621 C125.7,47.4375645 124.759798,48.3793103 123.6,48.3793103 Z M117.3,29.4482759 C116.140202,29.4482759 115.2,28.50653 115.2,27.3448276 C115.2,26.1831252 116.140202,25.2413793 117.3,25.2413793 C118.459798,25.2413793 119.4,26.1831252 119.4,27.3448276 C119.4,28.50653 118.459798,29.4482759 117.3,29.4482759 Z M117.3,42.0689655 C116.140202,42.0689655 115.2,41.1272196 115.2,39.9655172 C115.2,38.8038148 116.140202,37.862069 117.3,37.862069 C118.459798,37.862069 119.4,38.8038148 119.4,39.9655172 C119.4,41.1272196 118.459798,42.0689655 117.3,42.0689655 Z M129.9,29.4482759 C128.740202,29.4482759 127.8,28.50653 127.8,27.3448276 C127.8,26.1831252 128.740202,25.2413793 129.9,25.2413793 C131.059798,25.2413793 132,26.1831252 132,27.3448276 C132,28.50653 131.059798,29.4482759 129.9,29.4482759 Z M129.9,42.0689655 C128.740202,42.0689655 127.8,41.1272196 127.8,39.9655172 C127.8,38.8038148 128.740202,37.862069 129.9,37.862069 C131.059798,37.862069 132,38.8038148 132,39.9655172 C132,41.1272196 131.059798,42.0689655 129.9,42.0689655 Z M123.6,10.5172414 C122.440202,10.5172414 121.5,9.57549551 121.5,8.4137931 C121.5,7.2520907 122.440202,6.31034483 123.6,6.31034483 C124.759798,6.31034483 125.7,7.2520907 125.7,8.4137931 C125.7,9.57549551 124.759798,10.5172414 123.6,10.5172414 Z M117.3,4.20689655 C116.140202,4.20689655 115.2,3.26515068 115.2,2.10344828 C115.2,0.941745871 116.140202,0 117.3,0 C118.459798,0 119.4,0.941745871 119.4,2.10344828 C119.4,3.26515068 118.459798,4.20689655 117.3,4.20689655 Z M117.3,16.8275862 C116.140202,16.8275862 115.2,15.8858403 115.2,14.7241379 C115.2,13.5624355 116.140202,12.6206897 117.3,12.6206897 C118.459798,12.6206897 119.4,13.5624355 119.4,14.7241379 C119.4,15.8858403 118.459798,16.8275862 117.3,16.8275862 Z M129.9,16.8275862 C128.740202,16.8275862 127.8,15.8858403 127.8,14.7241379 C127.8,13.5624355 128.740202,12.6206897 129.9,12.6206897 C131.059798,12.6206897 132,13.5624355 132,14.7241379 C132,15.8858403 131.059798,16.8275862 129.9,16.8275862 Z M98.4,35.7586207 C97.240202,35.7586207 96.3,34.8168748 96.3,33.6551724 C96.3,32.49347 97.240202,31.5517241 98.4,31.5517241 C99.559798,31.5517241 100.5,32.49347 100.5,33.6551724 C100.5,34.8168748 99.559798,35.7586207 98.4,35.7586207 Z M98.4,23.137931 C97.240202,23.137931 96.3,22.1961852 96.3,21.0344828 C96.3,19.8727804 97.240202,18.9310345 98.4,18.9310345 C99.559798,18.9310345 100.5,19.8727804 100.5,21.0344828 C100.5,22.1961852 99.559798,23.137931 98.4,23.137931 Z M98.4,48.3793103 C97.240202,48.3793103 96.3,47.4375645 96.3,46.2758621 C96.3,45.1141597 97.240202,44.1724138 98.4,44.1724138 C99.559798,44.1724138 100.5,45.1141597 100.5,46.2758621 C100.5,47.4375645 99.559798,48.3793103 98.4,48.3793103 Z M92.1,29.4482759 C90.940202,29.4482759 90,28.50653 90,27.3448276 C90,26.1831252 90.940202,25.2413793 92.1,25.2413793 C93.259798,25.2413793 94.2,26.1831252 94.2,27.3448276 C94.2,28.50653 93.259798,29.4482759 92.1,29.4482759 Z M104.7,29.4482759 C103.540202,29.4482759 102.6,28.50653 102.6,27.3448276 C102.6,26.1831252 103.540202,25.2413793 104.7,25.2413793 C105.859798,25.2413793 106.8,26.1831252 106.8,27.3448276 C106.8,28.50653 105.859798,29.4482759 104.7,29.4482759 Z M104.7,42.0689655 C103.540202,42.0689655 102.6,41.1272196 102.6,39.9655172 C102.6,38.8038148 103.540202,37.862069 104.7,37.862069 C105.859798,37.862069 106.8,38.8038148 106.8,39.9655172 C106.8,41.1272196 105.859798,42.0689655 104.7,42.0689655 Z M98.4,10.5172414 C97.240202,10.5172414 96.3,9.57549551 96.3,8.4137931 C96.3,7.2520907 97.240202,6.31034483 98.4,6.31034483 C99.559798,6.31034483 100.5,7.2520907 100.5,8.4137931 C100.5,9.57549551 99.559798,10.5172414 98.4,10.5172414 Z M92.1,16.8275862 C90.940202,16.8275862 90,15.8858403 90,14.7241379 C90,13.5624355 90.940202,12.6206897 92.1,12.6206897 C93.259798,12.6206897 94.2,13.5624355 94.2,14.7241379 C94.2,15.8858403 93.259798,16.8275862 92.1,16.8275862 Z M104.7,4.20689655 C103.540202,4.20689655 102.6,3.26515068 102.6,2.10344828 C102.6,0.941745871 103.540202,0 104.7,0 C105.859798,0 106.8,0.941745871 106.8,2.10344828 C106.8,3.26515068 105.859798,4.20689655 104.7,4.20689655 Z M104.7,16.8275862 C103.540202,16.8275862 102.6,15.8858403 102.6,14.7241379 C102.6,13.5624355 103.540202,12.6206897 104.7,12.6206897 C105.859798,12.6206897 106.8,13.5624355 106.8,14.7241379 C106.8,15.8858403 105.859798,16.8275862 104.7,16.8275862 Z M111,35.7586207 C109.840202,35.7586207 108.9,34.8168748 108.9,33.6551724 C108.9,32.49347 109.840202,31.5517241 111,31.5517241 C112.159798,31.5517241 113.1,32.49347 113.1,33.6551724 C113.1,34.8168748 112.159798,35.7586207 111,35.7586207 Z M111,23.137931 C109.840202,23.137931 108.9,22.1961852 108.9,21.0344828 C108.9,19.8727804 109.840202,18.9310345 111,18.9310345 C112.159798,18.9310345 113.1,19.8727804 113.1,21.0344828 C113.1,22.1961852 112.159798,23.137931 111,23.137931 Z M111,48.3793103 C109.840202,48.3793103 108.9,47.4375645 108.9,46.2758621 C108.9,45.1141597 109.840202,44.1724138 111,44.1724138 C112.159798,44.1724138 113.1,45.1141597 113.1,46.2758621 C113.1,47.4375645 112.159798,48.3793103 111,48.3793103 Z M123.6,61 C122.440202,61 121.5,60.0582541 121.5,58.8965517 C121.5,57.7348493 122.440202,56.7931034 123.6,56.7931034 C124.759798,56.7931034 125.7,57.7348493 125.7,58.8965517 C125.7,60.0582541 124.759798,61 123.6,61 Z M129.9,54.6896552 C128.740202,54.6896552 127.8,53.7479093 127.8,52.5862069 C127.8,51.4245045 128.740202,50.4827586 129.9,50.4827586 C131.059798,50.4827586 132,51.4245045 132,52.5862069 C132,53.7479093 131.059798,54.6896552 129.9,54.6896552 Z M104.7,54.6896552 C103.540202,54.6896552 102.6,53.7479093 102.6,52.5862069 C102.6,51.4245045 103.540202,50.4827586 104.7,50.4827586 C105.859798,50.4827586 106.8,51.4245045 106.8,52.5862069 C106.8,53.7479093 105.859798,54.6896552 104.7,54.6896552 Z M111,61 C109.840202,61 108.9,60.0582541 108.9,58.8965517 C108.9,57.7348493 109.840202,56.7931034 111,56.7931034 C112.159798,56.7931034 113.1,57.7348493 113.1,58.8965517 C113.1,60.0582541 112.159798,61 111,61 Z M111,10.5172414 C109.840202,10.5172414 108.9,9.57549551 108.9,8.4137931 C108.9,7.2520907 109.840202,6.31034483 111,6.31034483 C112.159798,6.31034483 113.1,7.2520907 113.1,8.4137931 C113.1,9.57549551 112.159798,10.5172414 111,10.5172414 Z", id: "dots", fillOpacity: "0.1", fill: "#000000", fillRule: "nonzero" })] }));
const TextureDirty01 = ({ id, maskId }) => (jsxRuntime.jsxs("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M-9.11955629,122.092261 C-4.75864768,91.4015967 3.93799819,117.533631 24.8655794,112.12396 C34.1114596,109.733948 26.640969,99.2957595 33.5369251,94.7717324 C39.3618156,90.9503678 47.2997509,94.0293736 53.9721466,91.5579533 C63.6014225,87.99132 63.4748482,80.7354599 72.4469492,79.6510309 C80.9317383,78.6255016 89.8203396,82.0049911 98.377883,80.7354599 C114.52834,78.3395026 107.906382,46.7111063 120.01742,41.1251889 C132.128458,35.5392715 152.06764,45.1858521 154.677658,61 C156.373936,71.2777829 151.55461,95.5377314 140.21968,133.779846 L-9.11955629,133.779846", id: "clean-me", fillOpacity: "0.2", fill: "#000000" }), jsxRuntime.jsx("path", { d: "M35.9268464,122 C73.6043905,122 77.5268977,107.25032 96.0650387,100.492846 C114.60318,93.7353716 130.845661,111.213512 137.077849,94.2331339 C141.232642,82.9128816 143.298631,94.895504 143.275816,130.181001 L35.9268464,130.181001 L35.9268464,122 Z", id: "clean-me", fillOpacity: "0.1", fill: "#000000" }), jsxRuntime.jsx("path", { d: "M-2,4.86732511 C9.73320733,3.74652018 5.96193192,16.806064 10.5973598,16.806064 C12.4464321,16.806064 14.6252877,8.34889769 17.983215,8.34889769 C20.4379638,8.34889769 19.9753096,13.8424996 25.3050084,13.2617118 C30.3076746,12.7165614 29.3753984,9.26870987 31.9026708,9.26870987 C37.3453964,9.26870987 35.2872819,29.4636252 39.6440681,29.4636252 C44.0008542,29.4636252 45.3737266,14.6679622 47.2914382,8.8163548 C49.7180554,1.41189864 64.2635329,-2.73836446 53.8922857,-5.67986809 L-2.28674568,-5.67986809", id: "clean-me", fillOpacity: "0.4", fill: "#000000" })] }));
const TextureDirty02 = ({ id, maskId }) => (jsxRuntime.jsxs("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M-20,124.648555 C-16.811588,107.308454 -10.4531676,122.072947 4.84771523,119.016505 C11.6077,117.666158 6.14576431,111.768624 11.1876378,109.212567 C15.4464179,107.053511 21.2501186,108.793137 26.1285392,107.396795 C33.1688379,105.381661 33.076295,101.28213 39.6361103,100.669432 C45.8396348,100.090012 52.3384005,101.99941 58.5951182,101.28213 C70.4032792,99.9284239 65.5617357,82.0585087 74.4165368,78.902488 C83.2713379,75.7464674 97.8495674,81.1967462 99.7578423,90.1316754 C100.99805,95.938581 97.4744737,109.645353 89.187112,131.251992 L-20,131.251992", id: "so-dirty", fillOpacity: "0.2", fill: "#000000", transform: "translate(40.000000, 104.625996) scale(-1, 1) translate(-40.000000, -104.625996)" }), jsxRuntime.jsx("path", { d: "M-10,116.766616 C41.2432666,116.766616 46.5780646,90.9746332 71.7908251,79.1581974 C97.0035857,67.3417617 119.094139,97.9048577 127.570214,68.2121722 C133.220931,48.4170485 136.030775,69.3704236 135.999746,131.072298 L-10,131.072298 L-10,116.766616 Z", id: "so-dirty", fillOpacity: "0.1", fill: "#000000", transform: "translate(63.000000, 96.036149) scale(-1, 1) translate(-63.000000, -96.036149)" }), jsxRuntime.jsx("path", { d: "M81.2916974,3.17587305 C93.2275238,2.20079242 86.321669,13.9842725 91.0371454,13.9842725 C98.0044934,13.9842725 93.1398947,6.00620803 101.62,6.20478012 C103.83957,6.25675408 106.563717,8.14434394 106.732126,10.7089898 C107.093966,16.2193464 103.015188,25.7252553 108.570487,25.9952874 C113.749725,26.2470398 109.673776,16.3561956 110.214935,9.75934414 C110.524385,5.98709048 114.397472,3.0074528 117.183163,3.0074528 C124.754416,3.0074528 118.868741,18.7147098 124.318032,18.7147098 C129.767324,18.7147098 125.526609,9.66391004 129.399805,4.87149468 C133.902864,-0.700269812 148.699526,-3.44094345 138.149179,-6 L81,-6", id: "so-dirty", fillOpacity: "0.4", fill: "#000000", transform: "translate(111.433379, 10.000000) scale(-1, 1) translate(-111.433379, -10.000000)" })] }));
// For now, use simplified placeholders for the very large texture files
// These can be updated later with full implementations
const TextureCamo01 = ({ id, maskId }) => (jsxRuntime.jsx("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("rect", { id: "Camo-Placeholder", fillOpacity: "0.2", fill: "#4CAF50", x: "0", y: "0", width: "100%", height: "100%" }) }));
const TextureCamo02 = ({ id, maskId }) => (jsxRuntime.jsx("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("rect", { id: "Camo-Placeholder", fillOpacity: "0.2", fill: "#8BC34A", x: "0", y: "0", width: "100%", height: "100%" }) }));
const TextureGrunge01 = ({ id, maskId }) => (jsxRuntime.jsx("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("rect", { id: "Grunge-Placeholder", fillOpacity: "0.3", fill: "#795548", x: "0", y: "0", width: "100%", height: "100%" }) }));
const TextureGrunge02 = ({ id, maskId }) => (jsxRuntime.jsx("g", { id: id, mask: maskId ? `url(#${maskId})` : undefined, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("rect", { id: "Grunge-Placeholder", fillOpacity: "0.3", fill: "#5D4037", x: "0", y: "0", width: "100%", height: "100%" }) }));
const textureComponents = {
    None: TextureNone,
    Circuits: TextureCircuits,
    Dots: TextureDots,
    Dirty01: TextureDirty01,
    Dirty02: TextureDirty02,
    Camo01: TextureCamo01,
    Camo02: TextureCamo02,
    Grunge01: TextureGrunge01,
    Grunge02: TextureGrunge02,
};
function Texture({ maskId }) {
    const { textureType = 'None' } = useBotContext();
    const TextureComponent = textureComponents[textureType];
    if (!TextureComponent) {
        console.warn(`Unknown texture type: ${textureType}`);
        return null;
    }
    return jsxRuntime.jsx(TextureComponent, { id: `Texture/${textureType}`, maskId: maskId });
}

const colorMap = {
    Blue01: '#2196F3',
    Blue02: '#03A9F4',
    Blue03: '#3F51B5',
    BlueGrey01: '#607D8B',
    BlueGrey02: '#9E9E9E',
    BlueGrey03: '#424242',
    BlueGrey300: '#90A4AE',
    BlueGrey500: '#607D8B',
    Orange01: '#FF9800',
    Orange02: '#FF5722',
    Orange03: '#FFC107',
    Red01: '#F44336',
    Red02: '#E91E63',
    Red03: '#9C27B0',
    Yellow01: '#FFEB3B',
    Yellow02: '#CDDC39',
    Yellow03: '#8BC34A',
};
function CircleColor({ maskID, color = 'BlueGrey300', children, }) {
    const fillColor = colorMap[color] || colorMap.BlueGrey300;
    return (jsxRuntime.jsx("g", { id: `CircleColor-${color}`, mask: `url(#${maskID})`, fill: fillColor, children: children }));
}

function FaceColor({ maskID, children }) {
    const { faceColor = 'BlueGrey500' } = useBotContext();
    return (jsxRuntime.jsx(CircleColor, { maskID: maskID, color: faceColor, children: children }));
}

const FaceSquare01 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("rect", { id: pathName, x: "0", y: "0", width: "130", height: "120", rx: "8" }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Face", fill: "#607D8B", xlinkHref: `#${pathName}` })] }));
};
const FaceRound01 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("rect", { id: pathName, x: "0", y: "0", width: "130", height: "120", rx: "65" }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Face", fill: "#607D8B", xlinkHref: `#${pathName}` })] }));
};
const FaceArturito = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { d: "M60,0 L70,0 C103.137085,-6.08718376e-15 130,26.862915 130,60 L130,116 C130,118.209139 128.209139,120 126,120 L4,120 C1.790861,120 2.705415e-16,118.209139 0,116 L0,60 C-4.05812251e-15,26.862915 26.862915,6.08718376e-15 60,0 Z", id: pathName }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "R2", fill: "#E1E6E8", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("polygon", { id: "Color-Bar", fillOpacity: "0.8", fill: "#0040AE", mask: `url(#${maskName})`, points: "0 80 10 80 10 107 0 107" }), jsxRuntime.jsx("polygon", { id: "Color-Bar", fillOpacity: "0.8", fill: "#0040AE", mask: `url(#${maskName})`, points: "0 111 130 111 130 116 0 116" }), jsxRuntime.jsx("rect", { id: "Color-Bar", fillOpacity: "0.8", fill: "#0040AE", mask: `url(#${maskName})`, x: "121", y: "80", width: "9", height: "27" }), jsxRuntime.jsx("rect", { id: "Color-Bar", fillOpacity: "0.8", fill: "#0040AE", mask: `url(#${maskName})`, x: "7.3", y: "8", width: "54.9", height: "16.1834862" }), jsxRuntime.jsx("rect", { id: "Color-Bar", fillOpacity: "0.8", fill: "#0040AE", mask: `url(#${maskName})`, x: "65.8", y: "8", width: "54.9", height: "16.1834862" })] }));
};
const FaceRoboCop = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M126,79.5857961 L126,104 C126,112.836556 118.836556,120 110,120 L20,120 C11.163444,120 4,112.836556 4,104 L4,79.5857961 L0,79.5857961 L1.10489633e-15,41.0221632 C-6.41976585e-16,26.7578634 1.48520978,21.5852836 4.27412326,16.3704687 C7.06303674,11.1556539 11.1556539,7.06303674 16.3704687,4.27412326 C21.5852836,1.48520978 26.7578634,-7.71967361e-14 41.0221632,-7.98170454e-14 L88.9778368,-7.65023564e-14 C103.242137,-7.91226658e-14 108.414716,1.48520978 113.629531,4.27412326 C118.844346,7.06303674 122.936963,11.1556539 125.725877,16.3704687 C128.51479,21.5852836 130,26.7578634 130,41.0221632 L130,79.5857961 L126,79.5857961 Z", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Dead-or-alive", fill: "#0076DE", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("rect", { id: "Murphy", fillOpacity: "0.8", fill: "#000000", mask: `url(#${maskName})`, x: "4", y: "80", width: "122", height: "40" })] }));
};
const FaceRound02 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M0,89 C0,88.9795073 0.0141049326,89.1836401 0,90 C0.183374957,90.4764708 0.402008635,91.4971444 1,93 C1.82671155,96.0560243 3.7804036,99.5565275 7,103 C16.6943975,113.399831 35.1723647,120 65,120 C94.8276353,120 113.305603,113.399637 123,103 C126.219596,99.5565275 128.173198,96.0560243 129,93 C129.597973,91.4971251 129.816625,90.4764321 130,90 C129.985895,89.1836498 130,88.9795151 130,89 L130,50 C130,50.1036464 129.971788,49.4988099 130,49 C129.739042,46.8828777 129.471022,44.9851234 129,43 C127.813584,37.0088305 125.606104,31.0889814 122,26 C112.282973,9.66267383 94.2553094,0 65,0 C35.7447556,0 17.7163695,9.66228674 8,26 C4.39414151,31.089175 2.18649928,37.0088305 1,43 C0.529043306,44.9851234 0.26102792,46.8828583 0,49 C0.0282766705,49.4534424 6.49996895e-05,50.3228972 0,50 L0,89 Z", transform: "translate(65.000000, 60.000000) scale(1, -1) translate(-65.000000, -60.000000)", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Round-and-Soft", fill: "#E1E6E8", xlinkHref: `#${pathName}` })] }));
};
const FaceSquare02 = ({ id }) => {
    const pathName = `${id}-path-1`;
    const maskName = `${id}-mask-1`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M12,0 L118,0 C124.627417,-1.21743675e-15 130,5.372583 130,12 L130,82 C130,102.98682 112.98682,120 92,120 L38,120 C17.0131795,120 2.57014425e-15,102.98682 0,82 L0,12 C-8.11624501e-16,5.372583 5.372583,1.21743675e-15 12,0 Z", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Shape", fill: "#0076DE", xlinkHref: `#${pathName}` })] }));
};
const FaceSquare03 = ({ id }) => {
    const pathName = `${id}-path-1`;
    const maskName = `${id}-mask-1`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M18,-2.7000624e-13 L112,-2.91322522e-13 C121.941125,-2.93148677e-13 130,8.0588745 130,18 L130,45.1482908 C130,49.6830734 129.22888,54.1848394 127.719613,58.4610955 L110.238555,107.990762 C107.698575,115.187372 100.896418,120 93.2647285,120 L36.7352715,120 C29.1035817,120 22.3014253,115.187372 19.7614455,107.990762 L2.28038666,58.4610955 C0.771119772,54.1848394 1.50531546e-15,49.6830734 -7.10542736e-15,45.1482908 L-9.9475983e-14,18 C-1.18352406e-13,8.0588745 8.0588745,-2.86048235e-13 18,-3.05533376e-13 Z", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Shape", fill: "#0076DE", xlinkHref: `#${pathName}` })] }));
};
const FaceSquare04 = ({ id }) => {
    const pathName = `${id}-path-1`;
    const maskName = `${id}-mask-1`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M0,102 L0,68.8517092 C8.61074282e-15,64.3169266 0.771119772,59.8151606 2.28038666,55.5389045 L19.7614455,12.0092379 C22.3014253,4.81262825 29.1035817,1.42108547e-14 36.7352715,1.42108547e-14 L93.2647285,0 C100.896418,0 107.698575,4.81262825 110.238555,12.0092379 L127.719613,55.5389045 C129.22888,59.8151606 130,64.3169266 130,68.8517092 L130,102 C130,111.941125 121.941125,120 112,120 L18,120 C8.0588745,120 -1.8876423e-14,111.941125 0,102 Z", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Shape", fill: "#0076DE", xlinkHref: `#${pathName}` })] }));
};
const faceComponents = {
    Arturito: FaceArturito,
    RoboCop: FaceRoboCop,
    Round01: FaceRound01,
    Round02: FaceRound02,
    Square01: FaceSquare01,
    Square02: FaceSquare02,
    Square03: FaceSquare03,
    Square04: FaceSquare04,
};
function Face() {
    const { faceType = 'Square01' } = useBotContext();
    const FaceComponent = faceComponents[faceType];
    if (!FaceComponent) {
        console.warn(`Unknown face type: ${faceType}`);
        return null;
    }
    const faceId = `Face/${faceType}`;
    const maskId = `${faceId}-mask`;
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(FaceComponent, { id: faceId }), jsxRuntime.jsx(FaceColor, { maskID: maskId, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "130", height: "120" }) }), jsxRuntime.jsx(Texture, { maskId: maskId })] }));
}

const EyeRound = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Eye", transform: "translate(18.000000, 24.000000)", fill: "#FFFFFF", children: [jsxRuntime.jsx("circle", { cx: "6", cy: "6", r: "6" }), jsxRuntime.jsx("circle", { cx: "62", cy: "6", r: "6" })] }) }));
const EyeHappy = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Happy", transform: "translate(18.000000, 24.000000)", stroke: "#000000", strokeWidth: "2", children: [jsxRuntime.jsx("path", { d: "M0,6 C0,2.6862915 2.6862915,0 6,0 C9.3137085,0 12,2.6862915 12,6" }), jsxRuntime.jsx("path", { d: "M56,6 C56,2.6862915 58.6862915,0 62,0 C65.3137085,0 68,2.6862915 68,6" })] }) }));
const EyeDizzy = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M25,27.2 L19.5,32.7 C19.1,33.1 18.4,33.1 17.9,32.7 L16.3,31.1 C15.9,30.7 15.9,30 16.3,29.5 L21.8,24 L16.3,18.5 C15.9,18 15.9,17.3 16.3,16.9 L17.9,15.3 C18.3,14.9 19,14.9 19.5,15.3 L25,20.8 L30.5,15.3 C30.9,14.9 31.6,14.9 32.1,15.3 L33.7,16.9 C34.1,17.3 34.1,18 33.7,18.5 L28.2,24 L33.7,29.5 C34.1,29.9 34.1,30.6 33.7,31.1 L32.1,32.7 C31.7,33.1 31,33.1 30.5,32.7 L25,27.2 Z", id: "Eye", fill: "#000000", fillRule: "nonzero" }), jsxRuntime.jsx("path", { d: "M79,27.2 L73.5,32.7 C73.1,33.1 72.4,33.1 71.9,32.7 L70.3,31.1 C69.9,30.7 69.9,30 70.3,29.5 L75.8,24 L70.3,18.5 C69.9,18 69.9,17.3 70.3,16.9 L71.9,15.3 C72.3,14.9 73,14.9 73.5,15.3 L79,20.8 L84.5,15.3 C84.9,14.9 85.6,14.9 86.1,15.3 L87.7,16.9 C88.1,17.3 88.1,18 87.7,18.5 L82.2,24 L87.7,29.5 C88.1,29.9 88.1,30.6 87.7,31.1 L86.1,32.7 C85.7,33.1 85,33.1 84.5,32.7 L79,27.2 Z", id: "Eye", fill: "#000000", fillRule: "nonzero" })] }));
const EyeGlow = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.1", fill: "#FFFFFF", cx: "21", cy: "30", r: "15" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.1", fill: "#FFFFFF", cx: "83", cy: "30", r: "15" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.1", fill: "#FFFFFF", cx: "21", cy: "30", r: "12" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.1", fill: "#FFFFFF", cx: "83", cy: "30", r: "12" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.8", fill: "#FFFFFF", cx: "21", cy: "30", r: "6" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.8", fill: "#FFFFFF", cx: "83", cy: "30", r: "6" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.8", fill: "#FFFFFF", cx: "21", cy: "30", r: "3" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.8", fill: "#FFFFFF", cx: "83", cy: "30", r: "3" })] }));
const EyeHearts = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M29.9583333,10 C27.4074091,10 24.8837273,11.9797894 23.5,13.8206358 C22.1106364,11.9797894 19.5925909,10 17.0416667,10 C11.5523182,10 8,13.3341032 8,17.6412715 C8,23.3708668 12.4118636,26.771228 17.0416667,30.376724 C18.695,31.6133636 21.8223436,34.7777086 22.2083333,35.470905 C22.5943231,36.1641015 24.3143077,36.1885229 24.7916667,35.470905 C25.2690257,34.7532872 28.3021818,31.6133636 29.9583333,30.376724 C34.5853182,26.771228 39,23.3708668 39,17.6412715 C39,13.3341032 35.4476818,10 29.9583333,10 Z", id: "Heart", fill: "#FF5353", fillRule: "nonzero", transform: "translate(23.500000, 23.000000) rotate(-3.000000) translate(-23.500000, -23.000000)" }), jsxRuntime.jsx("path", { d: "M86.9583333,10 C84.4074091,10 81.8837273,11.9797894 80.5,13.8206358 C79.1106364,11.9797894 76.5925909,10 74.0416667,10 C68.5523182,10 65,13.3341032 65,17.6412715 C65,23.3708668 69.4118636,26.771228 74.0416667,30.376724 C75.695,31.6133636 78.8223436,34.7777086 79.2083333,35.470905 C79.5943231,36.1641015 81.3143077,36.1885229 81.7916667,35.470905 C82.2690257,34.7532872 85.3021818,31.6133636 86.9583333,30.376724 C91.5853182,26.771228 96,23.3708668 96,17.6412715 C96,13.3341032 92.4476818,10 86.9583333,10 Z", id: "Heart", fill: "#FF5353", fillRule: "nonzero", transform: "translate(80.500000, 23.000000) rotate(3.000000) translate(-80.500000, -23.000000)" })] }));
const EyeBulging = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("circle", { id: "Container", fillOpacity: "0.2", fill: "#000000", cx: "28", cy: "24", r: "18" }), jsxRuntime.jsx("circle", { id: "Container", fillOpacity: "0.2", fill: "#000000", cx: "74", cy: "24", r: "18" }), jsxRuntime.jsx("circle", { id: "Cornea", fill: "#F1EEDA", cx: "28", cy: "24", r: "15" }), jsxRuntime.jsx("circle", { id: "Cornea", fill: "#F1EEDA", cx: "74", cy: "24", r: "15" }), jsxRuntime.jsx("rect", { id: "Iris", fillOpacity: "0.8", fill: "#000000", x: "26", y: "15", width: "10", height: "10", rx: "2" }), jsxRuntime.jsx("rect", { id: "Iris", fillOpacity: "0.8", fill: "#000000", x: "74", y: "15", width: "10", height: "10", rx: "2" })] }));
// Keep the original shades implementation but with better masks
const EyeShadesNew = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M82.8310869,34 C78.274254,34.204594 75.2818899,35.6397034 73.8539945,38.3053279 C72.6354507,40.5801306 70.2641433,41.9999868 67.6835279,41.9999882 L52,42 L36.9013298,41.9999891 C34.0681565,41.9999875 31.4462964,40.5014832 30.0083339,38.0603493 C28.5305922,35.551685 25.5841186,34.1982352 21.1689131,34 L8,34 C3.581722,34 5.41083001e-16,30.418278 0,26 L0,8 C-5.41083001e-16,3.581722 3.581722,8.11624501e-16 8,0 L96,0 C100.418278,-8.11624501e-16 104,3.581722 104,8 L104,26 C104,30.418278 100.418278,34 96,34 L82.8310869,34 Z", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Container", fillOpacity: "0.8", fill: "#000000", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("path", { d: "M74.8310869,24 C70.2742542,24.204594 67.2818901,25.6397032 65.8539947,28.3053276 C64.6854389,30.4868112 62.4567598,31.8820547 60,31.9928601 L60,32 L44.9013298,31.9999891 C42.0681565,31.9999875 39.4462964,30.5014832 38.0083339,28.0603493 C36.5305922,25.551685 33.5841186,24.1982352 29.1689131,24 L17,24 C14.2385763,24 12,21.7614237 12,19 L12,17 C12,14.2385763 14.2385763,12 17,12 L87,12 C89.7614237,12 92,14.2385763 92,17 L92,19 C92,21.7614237 89.7614237,24 87,24 L74.8310869,24 Z", id: "Aww-Yeahh", fill: "#FF3D3D", mask: `url(#${maskName})` }), jsxRuntime.jsx("path", { d: "M39,-4 L50,-4 L30,42 L19,42 L39,-4 Z M28,-4 L32,-4 L12,42 L8,42 L28,-4 Z", id: "Highlight", fillOpacity: "0.2", fill: "#FFFFFF", mask: `url(#${maskName})` })] }));
};
const EyeArturito = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Radar-Eye", transform: "translate(23.000000, 5.000000)", children: [jsxRuntime.jsx("path", { d: "M50,0 L56,0 L58,32 L50,32 L50,38 L0,38 L9,0 L50,0 Z", id: "R2-Eye", fillOpacity: "0.8", fill: "#0040AE" }), jsxRuntime.jsx("circle", { id: "Outline", fillOpacity: "0.2", fill: "#000000", cx: "26", cy: "16", r: "15" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.6", fill: "#000000", cx: "26", cy: "16", r: "12" }), jsxRuntime.jsx("circle", { id: "Shine", fill: "#FFFFFF", cx: "31", cy: "9", r: "2" })] }) }));
const EyeEva = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M53,0 C87.746885,0 102.000559,17.474163 102,31 C101.999441,44.525837 82.4108252,48 53,48 C23.9528111,48 2,44.525837 2,31 C2,17.474163 17.1141791,3.17100737e-15 53,0 Z", id: "Path-2", fillOpacity: "0.8", fill: "#000000" }), jsxRuntime.jsxs("g", { id: "EeeeVaaaa", transform: "translate(18.000000, 16.000000)", fill: "#25A6F5", children: [jsxRuntime.jsx("path", { d: "M10.817693,18.6539934 C4.29096139,17.3000653 -0.41691297,12.312077 0.302361333,7.51300959 C1.02163564,2.7139422 6.89568406,-0.0788950027 13.4224157,1.2750331 C19.9491473,2.6289612 24.6570217,7.61694957 23.9377474,12.416017 C23.2184731,17.2150843 17.3444247,20.0079215 10.817693,18.6539934 Z", id: "vaaaa" }), jsxRuntime.jsx("path", { d: "M57.4224157,18.6539934 C50.8956841,20.0079215 45.0216356,17.2150843 44.3023613,12.416017 C43.583087,7.61694957 48.2909614,2.6289612 54.817693,1.2750331 C61.3444247,-0.0788950027 67.2184731,2.7139422 67.9377474,7.51300959 C68.6570217,12.312077 63.9491473,17.3000653 57.4224157,18.6539934 Z", id: "eeee" })] })] }));
const EyeRoboCop = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: pathName, x: "7", y: "16", width: "91", height: "16", rx: "4" }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Container", fillOpacity: "0.8", fill: "#000000", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("polygon", { id: "Reflection", fillOpacity: "0.8", fill: "#FFFFFF", mask: `url(#${maskName})`, points: "76 7 94 7 82 37 64 37" }), jsxRuntime.jsx("polygon", { id: "Reflection", fillOpacity: "0.8", fill: "#FFFFFF", mask: `url(#${maskName})`, points: "52 7 61 7 49 37 40 37" })] }));
};
const EyeSensor = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Radar-Eye", transform: "translate(8.000000, 4.000000)", children: [jsxRuntime.jsx("path", { d: "M81.4160437,22 L39.9012495,22 C38.8978007,32.1066454 30.3706962,40 20,40 C8.954305,40 0,31.045695 0,20 C0,8.954305 8.954305,0 20,0 C30.3706962,0 38.8978007,7.89335461 39.9012495,18 L81.4160437,18 C82.1876003,16.2340952 83.949681,15 86,15 C88.7614237,15 91,17.2385763 91,20 C91,22.7614237 88.7614237,25 86,25 C83.949681,25 82.1876003,23.7659048 81.4160437,22 Z", id: "Connector", fillOpacity: "0.2", fill: "#000000" }), jsxRuntime.jsx("circle", { id: "Shine", fill: "#FFFFFF", cx: "86", cy: "20", r: "2" }), jsxRuntime.jsx("circle", { id: "Eye", fillOpacity: "0.6", fill: "#000000", cx: "20", cy: "20", r: "16" }), jsxRuntime.jsx("circle", { id: "Shine", fill: "#FFFFFF", cx: "26", cy: "12", r: "3" })] }) }));
const EyeFrame01 = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Container", fillOpacity: "0.8", fill: "#000000", x: "0", y: "4", width: "104", height: "42", rx: "4" }), jsxRuntime.jsx("rect", { id: "Eye", fill: "#8BDDFF", x: "28", y: "25", width: "10", height: "11", rx: "2" }), jsxRuntime.jsx("rect", { id: "Eye", fill: "#8BDDFF", x: "66", y: "25", width: "10", height: "11", rx: "2" }), jsxRuntime.jsx("polygon", { id: "Reflection", fillOpacity: "0.4", fill: "#FFFFFF", points: "21 4 29 4 12 46 4 46" })] }));
const EyeFrame02 = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Container", fillOpacity: "0.8", fill: "#000000", x: "8", y: "10", width: "88", height: "36", rx: "4" }), jsxRuntime.jsx("rect", { id: "Eye", fill: "#5EF2B8", x: "28", y: "21", width: "10", height: "17", rx: "2" }), jsxRuntime.jsx("rect", { id: "Eye", fill: "#5EF2B8", x: "66", y: "21", width: "10", height: "17", rx: "2" }), jsxRuntime.jsx("polygon", { id: "Reflection", fillOpacity: "0.4", fill: "#FFFFFF", points: "83 10 88 10 76 46 71 46" })] }));
const EyeHal = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("circle", { id: "9k", fillOpacity: "0.4", fill: "#FFFFFF", cx: "52", cy: "24", r: "24" }), jsxRuntime.jsx("circle", { id: "Hal", fillOpacity: "0.8", fill: "#000000", cx: "52", cy: "24", r: "20" }), jsxRuntime.jsx("path", { d: "M65.4099666,15.2688976 C64.255446,13.4993048 62.7601287,11.9723152 61.0171519,10.7810659 M56.6467057,8.68518644 C55.1761516,8.23958978 53.6160554,8 52,8 C49.9125219,8 47.9184128,8.3997603 46.0900522,9.12690144 M41.0773564,12.308221 C39.5172104,13.7663492 38.2491513,15.5330907 37.37049,17.5111349", id: "Bright", strokeOpacity: "0.9", stroke: "#FFFFFF", strokeWidth: "2", strokeLinecap: "round" }), jsxRuntime.jsx("circle", { id: "Dave", fill: "#C6080C", cx: "52", cy: "24", r: "10" }), jsxRuntime.jsx("circle", { id: "I-can't-do-that", fill: "#EE9337", cx: "52", cy: "24", r: "4" }), jsxRuntime.jsx("circle", { id: "I'm-afraid", fill: "#F5F94F", cx: "52", cy: "24", r: "1" })] }));
const EyeRoundFrame01 = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Container", fillOpacity: "0.8", fill: "#000000", x: "0", y: "12", width: "104", height: "32", rx: "16" }), jsxRuntime.jsx("rect", { id: "Eye", fill: "#F4F4F4", x: "24", y: "22", width: "10", height: "12", rx: "2" }), jsxRuntime.jsx("rect", { id: "Eye", fill: "#F4F4F4", x: "70", y: "22", width: "10", height: "12", rx: "2" })] }));
const EyeRoundFrame02 = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Container", fillOpacity: "0.8", fill: "#000000", x: "0", y: "11", width: "104", height: "34", rx: "17" }), jsxRuntime.jsx("circle", { id: "Cornea", fill: "#F1EEDA", cx: "29", cy: "28", r: "13" }), jsxRuntime.jsx("circle", { id: "Cornea", fill: "#F1EEDA", cx: "75", cy: "28", r: "13" }), jsxRuntime.jsx("rect", { id: "Iris", fillOpacity: "0.8", fill: "#000000", x: "24", y: "23", width: "10", height: "10", rx: "2" }), jsxRuntime.jsx("rect", { id: "Iris", fillOpacity: "0.8", fill: "#000000", x: "70", y: "23", width: "10", height: "10", rx: "2" })] }));
const eyeComponents = {
    Arturito: EyeArturito,
    Bulging: EyeBulging,
    Dizzy: EyeDizzy,
    Eva: EyeEva,
    Frame01: EyeFrame01,
    Frame02: EyeFrame02,
    Glow: EyeGlow,
    Hal: EyeHal,
    Happy: EyeHappy,
    Hearts: EyeHearts,
    RoboCop: EyeRoboCop,
    Round: EyeRound,
    RoundFrame01: EyeRoundFrame01,
    RoundFrame02: EyeRoundFrame02,
    Sensor: EyeSensor,
    Shades: EyeShadesNew,
};
function Eyes() {
    const { eyeType = 'Round' } = useBotContext();
    const EyeComponent = eyeComponents[eyeType];
    if (!EyeComponent) {
        console.warn(`Unknown eye type: ${eyeType}`);
        return null;
    }
    return jsxRuntime.jsx(EyeComponent, { id: `Eyes/${eyeType}` });
}

const MouthSquare01 = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("g", { id: "Mouth", fill: "#000000", children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "76", height: "16", rx: "8" }) }) }));
const MouthSmile01 = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("g", { id: "Mouth", stroke: "#000000", strokeWidth: "3", children: jsxRuntime.jsx("path", { d: "M8,8 C8,13.5228475 17.9471525,18 38,18 C58.0528475,18 68,13.5228475 68,8" }) }) }));
const MouthGrill01 = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Mouth", fill: "#000000", children: [jsxRuntime.jsx("rect", { x: "8", y: "4", width: "60", height: "2" }), jsxRuntime.jsx("rect", { x: "8", y: "8", width: "60", height: "2" }), jsxRuntime.jsx("rect", { x: "8", y: "12", width: "60", height: "2" }), jsxRuntime.jsx("rect", { x: "8", y: "16", width: "60", height: "2" })] }) }));
const MouthArturito = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Color-Bar", fillOpacity: "0.8", fill: "#0040AE", x: "0", y: "0", width: "8", height: "27" }), jsxRuntime.jsxs("g", { id: "Processor-Status-Indicator", transform: "translate(12.000000, 0.000000)", children: [jsxRuntime.jsx("rect", { id: "Processor-container", fillOpacity: "0.8", fill: "#0040AE", x: "0", y: "0", width: "36", height: "27" }), jsxRuntime.jsx("circle", { id: "Light", fillOpacity: "0.6", fill: "#FFFFFF", cx: "18", cy: "14", r: "8" })] }), jsxRuntime.jsxs("g", { id: "Holographic-Projector", transform: "translate(52.000000, 2.000000)", fill: "#000000", fillOpacity: "0.4", children: [jsxRuntime.jsx("circle", { id: "R2", cx: "12", cy: "12", r: "12" }), jsxRuntime.jsx("circle", { id: "R2", cx: "12", cy: "12", r: "8.16" })] })] }));
const MouthBite = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Kiss-The-Robot-Beep-Boop", fillOpacity: "0.2", fill: "#000000", x: "4", y: "5", width: "68", height: "22", rx: "5" }), jsxRuntime.jsx("rect", { id: "Kiss-The-Robot-Beep-Boop", fillOpacity: "0.6", fill: "#000000", x: "8", y: "9", width: "60", height: "14", rx: "2" }), jsxRuntime.jsx("polygon", { id: "Triangle-2", fill: "#E1E6E8", transform: "translate(20.000000, 13.000000) scale(1, -1) translate(-20.000000, -13.000000)", points: "20 9 26 17 14 17" }), jsxRuntime.jsx("polygon", { id: "Triangle-2", fill: "#E1E6E8", transform: "translate(32.000000, 13.000000) scale(1, -1) translate(-32.000000, -13.000000)", points: "32 9 38 17 26 17" }), jsxRuntime.jsx("polygon", { id: "Triangle-2", fill: "#E1E6E8", transform: "translate(44.000000, 13.000000) scale(1, -1) translate(-44.000000, -13.000000)", points: "44 9 50 17 38 17" }), jsxRuntime.jsx("polygon", { id: "Triangle-2", fill: "#E1E6E8", transform: "translate(56.000000, 13.000000) scale(1, -1) translate(-56.000000, -13.000000)", points: "56 9 62 17 50 17" })] }));
const MouthDiagram = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Kiss-The-Robot-Beep-Boop", fillOpacity: "0.2", fill: "#000000", x: "4", y: "4", width: "68", height: "24", rx: "5" }), jsxRuntime.jsx("rect", { id: "Kiss-The-Robot-Beep-Boop", fillOpacity: "0.8", fill: "#000000", x: "8", y: "8", width: "60", height: "16", rx: "2" }), jsxRuntime.jsx("polyline", { id: "Path-3", stroke: "#4EFAC9", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", points: "9 17 20 17 22 13 25 20 29 12 31 21 34 10 37 20 40 17 55 17 58 13 60 20 63 17 67 17" })] }));
const MouthGrill02 = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Grill", transform: "translate(14.000000, 10.000000)", fill: "#000000", children: [jsxRuntime.jsx("rect", { id: "Grill-Grin", x: "14", y: "0", width: "6", height: "14", rx: "2" }), jsxRuntime.jsx("rect", { id: "Grill-Grin", x: "0", y: "0", width: "6", height: "14", rx: "2" }), jsxRuntime.jsx("rect", { id: "Grill-Grin", x: "28", y: "0", width: "6", height: "14", rx: "2" }), jsxRuntime.jsx("rect", { id: "Grill-Grin", x: "42", y: "0", width: "6", height: "14", rx: "2" })] }) }));
const MouthGrill03 = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("rect", { id: "Kiss-The-Robot-Beep-Boop", fillOpacity: "0.2", fill: "#000000", x: "4", y: "5", width: "68", height: "22", rx: "5" }), jsxRuntime.jsx("rect", { id: "Kiss-The-Robot-Beep-Boop", fill: "#FFFFFF", x: "8", y: "9", width: "60", height: "14", rx: "2" }), jsxRuntime.jsx("rect", { id: "Bender-Teeth", fillOpacity: "0.1", fill: "#000000", x: "18", y: "9", width: "4", height: "14" }), jsxRuntime.jsx("rect", { id: "Bender-Teeth", fillOpacity: "0.1", fill: "#000000", x: "42", y: "9", width: "4", height: "14" }), jsxRuntime.jsx("rect", { id: "Bender-Teeth", fillOpacity: "0.1", fill: "#000000", x: "30", y: "9", width: "4", height: "14" }), jsxRuntime.jsx("rect", { id: "Bender-Teeth", fillOpacity: "0.1", fill: "#000000", x: "54", y: "9", width: "4", height: "14" })] }));
const MouthRoboCop = ({ id }) => (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M38.000205,0 L76.000205,0 L76,21 C74.6982291,28.3333333 70.417878,32 63.1589466,32 C52.2706162,32 49.1374429,24.0000982 38.000205,24 C26.8628005,24 23.7296555,32 12.8412584,32 C5.58232699,32 1.30197584,28.3333333 0.000204963239,21 L-3.97903932e-13,0 L38.000205,0 Z", id: "Drop-It!", fill: "#F6E3D0" }), jsxRuntime.jsx("path", { d: "M30,8 C30,12.418278 33.581722,16 38,16 C42.418278,16 46,12.418278 46,8", id: "Thank-You-For-Your-Cooperation", stroke: "#A75548", strokeWidth: "4", strokeLinecap: "round" })] }));
const MouthSmile02 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M18,10.2222222 C18,21.7845222 24.4740576,28 38,28 C51.5182433,28 58,21.6614595 58,10.2222222 C58,9.49621891 57.1738581,8 55,8 C39.2707408,8 29.1916598,8 21,8 C18.9490269,8 18,9.38479408 18,10.2222222 Z", id: pathName }), jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { id: "Mouth", fillOpacity: "0.8", fill: "#000000", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("rect", { id: "Teeth", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "30", y: "2", width: "16", height: "14", rx: "2" })] }));
};
const MouthSquare02 = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx("rect", { id: "\uD83D\uDE10", fill: "#000000", x: "16", y: "8", width: "44", height: "4", rx: "2" }) }));
const mouthComponents = {
    Arturito: MouthArturito,
    Bite: MouthBite,
    Diagram: MouthDiagram,
    Grill01: MouthGrill01,
    Grill02: MouthGrill02,
    Grill03: MouthGrill03,
    RoboCop: MouthRoboCop,
    Smile01: MouthSmile01,
    Smile02: MouthSmile02,
    Square01: MouthSquare01,
    Square02: MouthSquare02,
};
function Mouth() {
    const { mouthType = 'Square01' } = useBotContext();
    const MouthComponent = mouthComponents[mouthType];
    if (!MouthComponent) {
        console.warn(`Unknown mouth type: ${mouthType}`);
        return null;
    }
    return jsxRuntime.jsx(MouthComponent, { id: `Mouth/${mouthType}` });
}

function SidesColor({ maskID, children }) {
    const { sidesColor = 'BlueGrey500' } = useBotContext();
    return (jsxRuntime.jsx(CircleColor, { maskID: maskID, color: sidesColor, children: children }));
}

const SidesSquare = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { id: pathName, d: "M0,0 L20,0 L20,76 L0,76 L0,0 Z M160,0 L180,0 L180,76 L160,76 L160,0 Z" }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Sides", fill: "#607D8B", xlinkHref: `#${pathName}` })] }));
};
const SidesRound = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { id: pathName, d: "M10,0 C15.522847,0 20,17.0883464 20,38 C20,58.9116536 15.522847,76 10,76 C4.477153,76 0,58.9116536 0,38 C0,17.0883464 4.477153,0 10,0 Z M170,0 C175.522847,0 180,17.0883464 180,38 C180,58.9116536 175.522847,76 170,76 C164.477153,76 160,58.9116536 160,38 C160,17.0883464 164.477153,0 170,0 Z" }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Sides", fill: "#607D8B", xlinkHref: `#${pathName}` })] }));
};
const SidesAntenna01 = ({ id }) => (jsxRuntime.jsx("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsxs("g", { id: "Sides", stroke: "#000000", strokeWidth: "2", children: [jsxRuntime.jsx("line", { x1: "10", y1: "10", x2: "30", y2: "0" }), jsxRuntime.jsx("line", { x1: "170", y1: "10", x2: "150", y2: "0" }), jsxRuntime.jsx("circle", { cx: "30", cy: "0", r: "2", fill: "#FF0000" }), jsxRuntime.jsx("circle", { cx: "150", cy: "0", r: "2", fill: "#FF0000" })] }) }));
const SidesAntenna02 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M152,19 L154.87223,19 C156.655267,19 157.30184,19.1856512 157.953691,19.5342654 C158.605543,19.8828796 159.11712,20.3944567 159.465735,21.0463086 C159.814349,21.6981604 160,22.3447329 160,24.1277704 L160,45.8722296 C160,47.6552671 159.814349,48.3018396 159.465735,48.9536914 C159.11712,49.6055433 158.605543,50.1171204 157.953691,50.4657346 C157.30184,50.8143488 156.655267,51 154.87223,51 L129.12777,51 C127.344733,51 126.69816,50.8143488 126.046309,50.4657346 C125.394457,50.1171204 124.88288,49.6055433 124.534265,48.9536914 C124.185651,48.3018396 124,47.6552671 124,45.8722296 L124,24.1277704 C124,22.3447329 124.185651,21.6981604 124.534265,21.0463086 C124.88288,20.3944567 125.394457,19.8828796 126.046309,19.5342654 C126.69816,19.1856512 127.344733,19 129.12777,19 L150,19 L150,0 L152,0 L152,19 Z M5.1277704,19 L30.8722296,19 C32.6552671,19 33.3018396,19.1856512 33.9536914,19.5342654 C34.6055433,19.8828796 35.1171204,20.3944567 35.4657346,21.0463086 C35.8143488,21.6981604 36,22.3447329 36,24.1277704 L36,45.8722296 C36,47.6552671 35.8143488,48.3018396 35.4657346,48.9536914 C35.1171204,49.6055433 34.6055433,50.1171204 33.9536914,50.4657346 C33.3018396,50.8143488 32.6552671,51 30.8722296,51 L5.1277704,51 C3.34473292,51 2.69816044,50.8143488 2.04630859,50.4657346 C1.39445674,50.1171204 0.882879593,49.6055433 0.534265408,48.9536914 C0.185651222,48.3018396 8.02470732e-17,47.6552671 -1.38112041e-16,45.8722296 L1.38112041e-16,24.1277704 C-8.02470732e-17,22.3447329 0.185651222,21.6981604 0.534265408,21.0463086 C0.882879593,20.3944567 1.39445674,19.8828796 2.04630859,19.5342654 C2.69816044,19.1856512 3.34473292,19 5.1277704,19 Z", id: pathName }), jsxRuntime.jsxs("g", { id: "Ears", transform: "translate(10.000000, 9.000000)", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { fill: "#0076DE", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("rect", { id: "Shadow", fillOpacity: "0.1", fill: "#000000", mask: `url(#${maskName})`, x: "-10", y: "29", width: "180", height: "38" })] }), jsxRuntime.jsxs("g", { id: "Antenna", transform: "translate(157.000000, 1.000000)", children: [jsxRuntime.jsx("rect", { fillOpacity: "0.4", fill: "#FFFFFF", x: "3", y: "7", width: "2", height: "20" }), jsxRuntime.jsx("circle", { id: "Beep-Boop", fill: "#E1E6E8", cx: "4", cy: "4", r: "4" }), jsxRuntime.jsx("circle", { id: "Beep-Boop", fill: "#FFFFFF", cx: "5", cy: "3", r: "2" })] })] }));
};
const SidesCables01 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M2,29 L14,29 C15.1045695,29 16,29.8954305 16,31 L16,49 C16,50.1045695 15.1045695,51 14,51 L2,51 C0.8954305,51 1.3527075e-16,50.1045695 0,49 L0,31 C-1.3527075e-16,29.8954305 0.8954305,29 2,29 Z M117,36 L136,36 C137.104569,36 138,36.8954305 138,38 L138,56 C138,57.1045695 137.104569,58 136,58 L117,58 C115.895431,58 115,57.1045695 115,56 L115,38 C115,36.8954305 115.895431,36 117,36 Z M117,0 L136,0 C137.104569,-2.02906125e-16 138,0.8954305 138,2 L138,16 C138,17.1045695 137.104569,18 136,18 L117,18 C115.895431,18 115,17.1045695 115,16 L115,2 C115,0.8954305 115.895431,2.02906125e-16 117,0 Z", id: pathName }), jsxRuntime.jsx("g", { id: "Cables-Left", opacity: "0.9", transform: "translate(13.000000, 11.000000)", stroke: "#2A3544", strokeWidth: "6", children: jsxRuntime.jsx("path", { d: "M25,1 C22.0459826,12.6966281 5.09589655,7.66625764 1.63133076,19.0090388 C-1.83323502,30.35182 9.65649568,39 19.1552405,39", id: "Cable" }) }), jsxRuntime.jsx("g", { id: "Cables-Right", opacity: "0.9", transform: "translate(150.000000, 19.000000)", stroke: "#2A3544", strokeWidth: "4", children: jsxRuntime.jsx("path", { d: "M0,36 C8.39445109,39.4863785 20.1016531,28.4063428 16,19.5 C11.8983469,10.5936572 0,12.8056069 0,0.195051106", id: "Cable" }) }), jsxRuntime.jsxs("g", { id: "Connectors", transform: "translate(21.000000, 6.000000)", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { fill: "#273951", xlinkHref: `#${pathName}` })] })] }));
};
const SidesCables02 = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M2,27 L14,27 C15.1045695,27 16,27.8954305 16,29 L16,47 C16,48.1045695 15.1045695,49 14,49 L2,49 C0.8954305,49 1.3527075e-16,48.1045695 0,47 L0,29 C-1.3527075e-16,27.8954305 0.8954305,27 2,27 Z M3,60 L15,60 C16.1045695,60 17,60.8954305 17,62 L17,70 C17,71.1045695 16.1045695,72 15,72 L3,72 C1.8954305,72 1,71.1045695 1,70 L1,62 C1,60.8954305 1.8954305,60 3,60 Z M124,42 L136,42 C137.104569,42 138,42.8954305 138,44 L138,62 C138,63.1045695 137.104569,64 136,64 L124,64 C122.895431,64 122,63.1045695 122,62 L122,44 C122,42.8954305 122.895431,42 124,42 Z M124,0 L136,0 C137.104569,-2.02906125e-16 138,0.8954305 138,2 L138,20 C138,21.1045695 137.104569,22 136,22 L124,22 C122.895431,22 122,21.1045695 122,20 L122,2 C122,0.8954305 122.895431,2.02906125e-16 124,0 Z", id: pathName }), jsxRuntime.jsxs("g", { id: "Cables-Left", opacity: "0.9", transform: "translate(8.000000, 5.000000)", stroke: "#2A3544", children: [jsxRuntime.jsx("ellipse", { id: "Cable", strokeWidth: "6", cx: "24.5", cy: "18", rx: "16.5", ry: "18" }), jsxRuntime.jsx("path", { d: "M18.8032032,36.4616969 C18.8032032,27.9012833 11.6397592,20.9616969 2.80320323,20.9616969", id: "Cable", strokeWidth: "4", transform: "translate(10.803203, 28.711697) scale(1, -1) rotate(-60.000000) translate(-10.803203, -28.711697)" }), jsxRuntime.jsx("path", { d: "M20,62 C29.3888407,62 37,55.5081289 37,47.5 C37,39.4918711 29.3888407,33 20,33 C10.6111593,33 4,39.4918711 4,47.5 C4,55.5081289 10.6111593,62 20,62 Z", id: "Cable", strokeWidth: "4" })] }), jsxRuntime.jsxs("g", { id: "Cables-Right", opacity: "0.9", transform: "translate(132.000000, 7.000000)", stroke: "#2A3544", children: [jsxRuntime.jsx("path", { d: "M33.8032032,58.4616969 C33.8032032,49.9012833 26.6397592,42.9616969 17.8032032,42.9616969", id: "Cable", strokeWidth: "4", transform: "translate(25.803203, 50.711697) rotate(-30.000000) translate(-25.803203, -50.711697)" }), jsxRuntime.jsx("path", { d: "M16,31 C25.3888407,31 33,24.0604136 33,15.5 C33,6.93958638 25.3888407,0 16,0 C6.61115925,0 0,6.93958638 0,15.5 C0,24.0604136 6.61115925,31 16,31 Z", id: "Cable", strokeWidth: "6" })] }), jsxRuntime.jsxs("g", { id: "Connectors", transform: "translate(21.000000, 0.000000)", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { fill: "#273951", xlinkHref: `#${pathName}` })] })] }));
};
const SidesSquareAsymmetric = ({ id }) => {
    const pathName = `${id}-path`;
    const maskName = `${id}-mask`;
    return (jsxRuntime.jsxs("g", { id: id, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M160,15.0003274 C161.68664,15.0091031 162.317652,15.194108 162.953691,15.5342654 C163.605543,15.8828796 164.11712,16.3944567 164.465735,17.0463086 C164.814349,17.6981604 165,18.3447329 165,20.1277704 L165,39.8722296 C165,41.6552671 164.814349,42.3018396 164.465735,42.9536914 C164.11712,43.6055433 163.605543,44.1171204 162.953691,44.4657346 C162.317652,44.805892 161.68664,44.9908969 160,44.9996726 L160,54.8722296 C160,56.6552671 159.814349,57.3018396 159.465735,57.9536914 C159.11712,58.6055433 158.605543,59.1171204 157.953691,59.4657346 C157.30184,59.8143488 156.655267,60 154.87223,60 L129.12777,60 C127.344733,60 126.69816,59.8143488 126.046309,59.4657346 C125.394457,59.1171204 124.88288,58.6055433 124.534265,57.9536914 C124.185651,57.3018396 124,56.6552671 124,54.8722296 L124,5.1277704 C124,3.34473292 124.185651,2.69816044 124.534265,2.04630859 C124.88288,1.39445674 125.394457,0.882879593 126.046309,0.534265408 C126.69816,0.185651222 127.344733,1.2037061e-16 129.12777,-2.07168062e-16 L154.87223,2.07168062e-16 C156.655267,-1.2037061e-16 157.30184,0.185651222 157.953691,0.534265408 C158.605543,0.882879593 159.11712,1.39445674 159.465735,2.04630859 C159.814349,2.69816044 160,3.34473292 160,5.1277704 L160,15.0003274 Z M10,23 L10,12.1277704 C10,10.3447329 10.1856512,9.69816044 10.5342654,9.04630859 C10.8828796,8.39445674 11.3944567,7.88287959 12.0463086,7.53426541 C12.6981604,7.18565122 13.3447329,7 15.1277704,7 L30.8722296,7 C32.6552671,7 33.3018396,7.18565122 33.9536914,7.53426541 C34.6055433,7.88287959 35.1171204,8.39445674 35.4657346,9.04630859 C35.8143488,9.69816044 36,10.3447329 36,12.1277704 L36,28.1277704 L36,47.8722296 C36,49.6552671 35.8143488,50.3018396 35.4657346,50.9536914 C35.1171204,51.6055433 34.6055433,52.1171204 33.9536914,52.4657346 C33.3018396,52.8143488 32.6552671,53 30.8722296,53 L5.1277704,53 C3.34473292,53 2.69816044,52.8143488 2.04630859,52.4657346 C1.39445674,52.1171204 0.882879593,51.6055433 0.534265408,50.9536914 C0.185651222,50.3018396 8.02470732e-17,49.6552671 -1.38112041e-16,47.8722296 L1.38112041e-16,28.1277704 C-8.02470732e-17,26.3447329 0.185651222,25.6981604 0.534265408,25.0463086 C0.882879593,24.3944567 1.39445674,23.8828796 2.04630859,23.5342654 C2.69816044,23.1856512 3.34473292,23 5.1277704,23 L10,23 Z", id: pathName }), jsxRuntime.jsxs("g", { id: "Ears", transform: "translate(10.000000, 8.000000)", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }) }), jsxRuntime.jsx("use", { fill: "#0076DE", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("rect", { id: "Shadow", fillOpacity: "0.1", fill: "#000000", mask: `url(#${maskName})`, x: "-10", y: "39", width: "180", height: "29" }), jsxRuntime.jsx("circle", { id: "Beep", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})`, cx: "151", cy: "12", r: "5" }), jsxRuntime.jsx("circle", { id: "Beep", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})`, cx: "151", cy: "28", r: "5" })] })] }));
};
const sidesComponents = {
    Antenna01: SidesAntenna01,
    Antenna02: SidesAntenna02,
    Cables01: SidesCables01,
    Cables02: SidesCables02,
    Round: SidesRound,
    Square: SidesSquare,
    SquareAsymmetric: SidesSquareAsymmetric,
};
function Sides() {
    const { sideType = 'Square' } = useBotContext();
    const SidesComponent = sidesComponents[sideType];
    if (!SidesComponent) {
        console.warn(`Unknown sides type: ${sideType}`);
        return null;
    }
    const sidesId = `Sides/${sideType}`;
    const maskId = `${sidesId}-mask`;
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(SidesComponent, { id: sidesId }), jsxRuntime.jsx(SidesColor, { maskID: maskId, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "180", height: "76" }) })] }));
}

// Modern TopColor component using CircleColor
const TopColor = ({ maskID, children }) => {
    const { topColor } = useBotContext();
    return (jsxRuntime.jsx(CircleColor, { maskID: maskID, color: topColor, children: children }));
};
const TopAntenna = () => {
    const pieceId = 'Top/Antenna';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M10,31 L10,0 L14,0 L14,31 L22,31 C23.1045695,31 24,31.8954305 24,33 L24,47 L0,47 L0,33 C-1.3527075e-16,31.8954305 0.8954305,31 2,31 L10,31 Z", id: pathName }), jsxRuntime.jsxs("g", { id: "Antenna", transform: "translate(38.000000, 5.000000)", children: [jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { fill: "#E1E6E8", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("g", { transform: "translate(-38.000000, -5.000000)", children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }) }), jsxRuntime.jsx("rect", { id: "Lite", fillOpacity: "0.2", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "0", y: "31", width: "24", height: "16" })] }), jsxRuntime.jsx("circle", { id: "Beep-Boop", fill: "#FFE65C", cx: "50", cy: "8", r: "8" }), jsxRuntime.jsx("circle", { id: "Beep-Boop", fill: "#FFFFFF", cx: "53", cy: "5", r: "3" })] }));
};
const TopAntennaCrooked = () => {
    const pieceId = 'Top/AntennaCrooked';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M15.5683097,27 L24,27 L24,40 L7.10542736e-15,40 L7.10542736e-15,27 L12.0880581,27 L14.1789906,22.5630665 L8.12882501,12.1305168 L11.3538641,0.294936464 L14.2483322,1.08364073 L11.352836,11.7098307 L17.5437409,22.3850631 L15.5683097,27 Z", id: pathName }), jsxRuntime.jsxs("g", { id: "Antenna", transform: "translate(38.000000, 12.000000)", children: [jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { fill: "#E6E6E6", fillRule: "nonzero", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("g", { transform: "translate(-38.000000, -12.000000)", children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }) }), jsxRuntime.jsx("rect", { id: "Lite", fillOpacity: "0.2", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "0", y: "27", width: "24", height: "13" })] }), jsxRuntime.jsx("circle", { id: "Beep-Boop", fill: "#FFE65C", cx: "50", cy: "8", r: "8" }), jsxRuntime.jsx("circle", { id: "Beep-Boop", fill: "#FFFFFF", cx: "53", cy: "5", r: "3" })] }));
};
const TopBulb01 = () => {
    const pieceId = 'Top/Bulb-01';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M70,36 L79,36 C79.5522847,36 80,36.4477153 80,37 L80,51 C80,51.5522847 79.5522847,52 79,52 L21,52 C20.4477153,52 20,51.5522847 20,51 L20,37 C20,36.4477153 20.4477153,36 21,36 L30,36 L30,33 C30,21.954305 38.954305,13 50,13 C61.045695,13 70,21.954305 70,33 L70,36 Z", id: pathName }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Bulb-Mask", fill: "#59C4FF", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }), jsxRuntime.jsx("path", { d: "M50,36 C52.209139,36 54,35.0279942 54,31.7142857 C54,28.4005772 52.209139,24 50,24 C47.790861,24 46,28.4005772 46,31.7142857 C46,35.0279942 47.790861,36 50,36 Z", id: "Light", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})` }), jsxRuntime.jsx("rect", { id: "Highlight", fillOpacity: "0.4", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "20", y: "13", width: "60", height: "23" }), jsxRuntime.jsx("path", { d: "M50,15.5 C54.9315485,15.5 59.3660426,17.6281427 62.4352098,21.0161556 M64.8733745,24.5107242 C65.5630474,25.8293043 66.0825179,27.2509729 66.4026217,28.7465657", id: "Reflection", stroke: "#FFFFFF", strokeWidth: "2", strokeLinecap: "round", mask: `url(#${maskName})` })] }));
};
const TopBulb02 = () => {
    const pieceId = 'Top/Bulb-02';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("path", { d: "M60,40 L77,40 C77.5522847,40 78,40.4477153 78,41 L78,51 C78,51.5522847 77.5522847,52 77,52 L23,52 C22.4477153,52 22,51.5522847 22,51 L22,41 C22,40.4477153 22.4477153,40 23,40 L40,40 C35.581722,40 32,36.418278 32,32 L32,16 C32,7.163444 39.163444,1.623249e-15 48,0 L52,0 C60.836556,-1.623249e-15 68,7.163444 68,16 L68,32 C68,36.418278 64.418278,40 60,40 Z", id: pathName }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Bulb-Mask", fill: "#59C4FF", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }), jsxRuntime.jsx("rect", { id: "Highlight", fillOpacity: "0.4", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "20", y: "-3", width: "60", height: "43" }), jsxRuntime.jsx("path", { d: "M49,3.5 C53.9315485,3.5 58.3660426,5.62814271 61.4352098,9.01615555", id: "Reflection", stroke: "#FFFFFF", strokeWidth: "2", strokeLinecap: "round", mask: `url(#${maskName})` }), jsxRuntime.jsx("path", { d: "M49.8284271,26 L50.3137085,26 L59.3137085,17 L62.1421356,19.8284271 L52,29.9705627 L52,40 L48,40 L48,29.8284271 L38,19.8284271 L40.8284271,17 L49.8284271,26 Z", id: "Why", fillOpacity: "0.8", fill: "#FFFFFF", mask: `url(#${maskName})` })] }));
};
const TopGlowingBulb01 = () => {
    const pieceId = 'Top/GlowingBulb01';
    const pathName1 = `${pieceId}-path-1`;
    const pathName2 = `${pieceId}-path-2`;
    const filterName1 = `${pieceId}-filter-1`;
    const filterName2 = `${pieceId}-filter-2`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsxs("defs", { children: [jsxRuntime.jsx("path", { d: "M48,8 L52,8 C60.836556,8 68,15.163444 68,24 L68,32 C68,36.418278 64.418278,40 60,40 L40,40 C35.581722,40 32,36.418278 32,32 L32,24 C32,15.163444 39.163444,8 48,8 Z", id: pathName1 }), jsxRuntime.jsxs("filter", { x: "-33.3%", y: "-37.5%", width: "166.7%", height: "175.0%", filterUnits: "objectBoundingBox", id: filterName1, children: [jsxRuntime.jsx("feOffset", { dx: "0", dy: "0", in: "SourceAlpha", result: "shadowOffsetOuter1" }), jsxRuntime.jsx("feGaussianBlur", { stdDeviation: "4", in: "shadowOffsetOuter1", result: "shadowBlurOuter1" }), jsxRuntime.jsx("feComposite", { in: "shadowBlurOuter1", in2: "SourceAlpha", operator: "out", result: "shadowBlurOuter1" }), jsxRuntime.jsx("feColorMatrix", { values: "0 0 0 0 1   0 0 0 0 1   0 0 0 0 1  0 0 0 0.5 0", type: "matrix", in: "shadowBlurOuter1" })] }), jsxRuntime.jsxs("filter", { x: "-27.8%", y: "-31.2%", width: "155.6%", height: "162.5%", filterUnits: "objectBoundingBox", id: filterName2, children: [jsxRuntime.jsx("feGaussianBlur", { stdDeviation: "2", in: "SourceAlpha", result: "shadowBlurInner1" }), jsxRuntime.jsx("feOffset", { dx: "0", dy: "0", in: "shadowBlurInner1", result: "shadowOffsetInner1" }), jsxRuntime.jsx("feComposite", { in: "shadowOffsetInner1", in2: "SourceAlpha", operator: "arithmetic", k2: "-1", k3: "1", result: "shadowInnerInner1" }), jsxRuntime.jsx("feColorMatrix", { values: "0 0 0 0 1   0 0 0 0 1   0 0 0 0 1  0 0 0 0.5 0", type: "matrix", in: "shadowInnerInner1" })] }), jsxRuntime.jsx("rect", { id: pathName2, x: "22", y: "40", width: "56", height: "12", rx: "1" })] }), jsxRuntime.jsxs("g", { id: "Bulb", children: [jsxRuntime.jsx("use", { fill: "black", fillOpacity: "1", filter: `url(#${filterName1})`, xlinkHref: `#${pathName1}` }), jsxRuntime.jsx("use", { fillOpacity: "0.300000012", fill: "#FFFFFF", fillRule: "evenodd", xlinkHref: `#${pathName1}` }), jsxRuntime.jsx("use", { fill: "black", fillOpacity: "1", filter: `url(#${filterName2})`, xlinkHref: `#${pathName1}` })] }), jsxRuntime.jsx("path", { d: "M49,11.5 C53.9315485,11.5 58.3660426,13.6281427 61.4352098,17.0161556", id: "Reflection", stroke: "#FFFFFF", strokeWidth: "2", strokeLinecap: "round" }), jsxRuntime.jsx("path", { d: "M49.8284271,29 L50.3137085,29 L59.3137085,20 L62.1421356,22.8284271 L52,32.9705627 L52,40 L48,40 L48,32.8284271 L38,22.8284271 L40.8284271,20 L49.8284271,29 Z", id: "Why", fillOpacity: "0.8", fill: "#FFFFFF" }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName2}` }) }), jsxRuntime.jsx("use", { id: "Band", fill: "#48494B", xlinkHref: `#${pathName2}` })] }));
};
const TopGlowingBulb02 = () => {
    const pieceId = 'Top/GlowingBulb02';
    const pathName1 = `${pieceId}-path-1`;
    const pathName2 = `${pieceId}-path-2`;
    const pathName3 = `${pieceId}-path-3`;
    const filterName1 = `${pieceId}-filter-1`;
    const filterName2 = `${pieceId}-filter-2`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsxs("defs", { children: [jsxRuntime.jsx("path", { d: "M50,13 L50,13 C61.045695,13 70,21.954305 70,33 L70,44 L30,44 L30,33 C30,21.954305 38.954305,13 50,13 Z", id: pathName1 }), jsxRuntime.jsxs("filter", { x: "-30.0%", y: "-38.7%", width: "160.0%", height: "177.4%", filterUnits: "objectBoundingBox", id: filterName1, children: [jsxRuntime.jsx("feOffset", { dx: "0", dy: "0", in: "SourceAlpha", result: "shadowOffsetOuter1" }), jsxRuntime.jsx("feGaussianBlur", { stdDeviation: "4", in: "shadowOffsetOuter1", result: "shadowBlurOuter1" }), jsxRuntime.jsx("feComposite", { in: "shadowBlurOuter1", in2: "SourceAlpha", operator: "out", result: "shadowBlurOuter1" }), jsxRuntime.jsx("feColorMatrix", { values: "0 0 0 0 1   0 0 0 0 1   0 0 0 0 1  0 0 0 0.5 0", type: "matrix", in: "shadowBlurOuter1" })] }), jsxRuntime.jsxs("filter", { x: "-25.0%", y: "-32.3%", width: "150.0%", height: "164.5%", filterUnits: "objectBoundingBox", id: filterName2, children: [jsxRuntime.jsx("feGaussianBlur", { stdDeviation: "2", in: "SourceAlpha", result: "shadowBlurInner1" }), jsxRuntime.jsx("feOffset", { dx: "0", dy: "0", in: "shadowBlurInner1", result: "shadowOffsetInner1" }), jsxRuntime.jsx("feComposite", { in: "shadowOffsetInner1", in2: "SourceAlpha", operator: "arithmetic", k2: "-1", k3: "1", result: "shadowInnerInner1" }), jsxRuntime.jsx("feColorMatrix", { values: "0 0 0 0 1   0 0 0 0 1   0 0 0 0 1  0 0 0 0.5 0", type: "matrix", in: "shadowInnerInner1" })] })] }), jsxRuntime.jsxs("g", { id: "Bulb", children: [jsxRuntime.jsx("use", { fill: "black", fillOpacity: "1", filter: `url(#${filterName1})`, xlinkHref: `#${pathName1}` }), jsxRuntime.jsx("use", { fillOpacity: "0.300000012", fill: "#FFFFFF", fillRule: "evenodd", xlinkHref: `#${pathName1}` }), jsxRuntime.jsx("use", { fill: "black", fillOpacity: "1", filter: `url(#${filterName2})`, xlinkHref: `#${pathName1}` })] }), jsxRuntime.jsx("path", { d: "M50,36 C52.209139,36 54,35.0279942 54,31.7142857 C54,28.4005772 52.209139,24 50,24 C47.790861,24 46,28.4005772 46,31.7142857 C46,35.0279942 47.790861,36 50,36 Z", id: "Light", fillOpacity: "0.6", fill: "#FFFFFF" }), jsxRuntime.jsx("path", { d: "M50,15.5 C54.9315485,15.5 59.3660426,17.6281427 62.4352098,21.0161556 M64.8733745,24.5107242 C65.5630474,25.8293043 66.0825179,27.2509729 66.4026217,28.7465657", id: "Reflection", stroke: "#FFFFFF", strokeWidth: "2", strokeLinecap: "round" }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName1}` }) }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("rect", { id: pathName3, x: "20", y: "36", width: "60", height: "16", rx: "1" }) }), jsxRuntime.jsx("use", { id: "Band", fill: "#48494B", xlinkHref: `#${pathName2}` })] }));
};
const TopHorns = () => {
    const pieceId = 'Top/Horns';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { d: "M71.2103664,40 C78.849875,33.2931152 84.6313286,20.6881892 84,14 C83.8634599,12.5535174 85.9998112,12.299289 87,14 C90.3310591,19.6640994 91.0533229,28.3307631 89.1667915,39.9999912 L92,40 L92,52 L66,52 L66,40 L71.2103664,40 Z M11.2146853,40 C9.04339114,28.3168723 9.78304742,19.6838312 13.4336542,14.1008765 C14.3353248,12.7219314 16.5210219,12.6807087 16.5210219,13.7408438 C16.5210219,21.2733229 21.4918044,33.4449643 29.2618055,40 L34,40 L34,52 L8,52 L8,40 L11.2146853,40 Z", id: pathName }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Horns", fill: "#E1E6E8", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }), jsxRuntime.jsx("rect", { id: "Shadow", fillOpacity: "0.4", fill: "#000000", mask: `url(#${maskName})`, x: "0", y: "40", width: "100", height: "12" }), jsxRuntime.jsx("path", { d: "M15.4558151,13 L31.5688672,13 L31.5688672,40 L20.8200683,40 C15.8541795,34.7666145 14.0660951,25.7666145 15.4558151,13 Z", id: "Light", fillOpacity: "0.4", fill: "#FFFFFF", mask: `url(#${maskName})` }), jsxRuntime.jsx("path", { d: "M84.8200683,13 L92.5688672,13 L92.5688672,40 L81.8200683,40 C85.6540878,34.7964297 86.6540878,25.7964297 84.8200683,13 Z", id: "Light", fillOpacity: "0.4", fill: "#FFFFFF", mask: `url(#${maskName})` })] }));
};
const TopLights = () => {
    const pieceId = 'Top/Lights';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { d: "M56,18 L56,5 C56,2.23857625 58.2385763,5.07265313e-16 61,0 L67,0 C69.7614237,-5.07265313e-16 72,2.23857625 72,5 L72,18 L78,18 C79.1045695,18 80,18.8954305 80,20 L80,30 L0,30 L0,20 C-1.3527075e-16,18.8954305 0.8954305,18 2,18 L8,18 L8,5 C8,2.23857625 10.2385763,5.07265313e-16 13,0 L19,0 C21.7614237,-5.07265313e-16 24,2.23857625 24,5 L24,18 L32,18 L32,5 C32,2.23857625 34.2385763,5.07265313e-16 37,0 L43,0 C45.7614237,-5.07265313e-16 48,2.23857625 48,5 L48,18 L56,18 Z", id: pathName }) }), jsxRuntime.jsxs("g", { id: "Bulbs", transform: "translate(10.000000, 22.000000)", children: [jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { fill: "#E1E6E8", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("g", { transform: "translate(-10.000000, -22.000000)", children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }) }), jsxRuntime.jsx("rect", { id: "Highlite", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "-10", y: "-22", width: "100", height: "40" }), jsxRuntime.jsx("rect", { id: "Light", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "14", y: "6", width: "4", height: "8", rx: "2" }), jsxRuntime.jsx("rect", { id: "Light", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "38", y: "6", width: "4", height: "8", rx: "2" }), jsxRuntime.jsx("rect", { id: "Light", fillOpacity: "0.6", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "62", y: "6", width: "4", height: "8", rx: "2" })] })] }));
};
const TopPlankton = () => {
    const pieceId = 'Top/Plankton';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { d: "M0,0 C0,6.418278 1.28514913,11 6.5,11 C11.7148509,11 13,6.418278 13,0", id: pathName }) }), jsxRuntime.jsx("path", { d: "M13.5,51.5 L86.5,51.5 L86.5,22 C86.5,10.1048506 78.7743593,0.5 69.3043478,0.5 L30.6956522,0.5 C21.2256407,0.5 13.5,10.1048506 13.5,22 L13.5,51.5 Z", id: "Case", stroke: "#ECECEC", fillOpacity: "0.5", fill: "#FFFFFF" }), jsxRuntime.jsxs("g", { id: "Plankton", transform: "translate(20.000000, 1.000000)", children: [jsxRuntime.jsx("path", { d: "M4,27 C7.32929829,37.5297416 11.995965,43.1964083 18,44", id: "Arm", stroke: "#6C9D91", strokeWidth: "3.2" }), jsxRuntime.jsx("path", { d: "M41,34 C44.3292983,40.1939656 48.995965,43.527299 55,44", id: "Arm", stroke: "#6C9D91", strokeWidth: "3.2", transform: "translate(48.000000, 39.000000) scale(-1, 1) translate(-48.000000, -39.000000) " }), jsxRuntime.jsx("path", { d: "M16,0 C17.8048884,3.09304639 19.8048884,8.68897612 22,17.0526316 L19.75,18 C18.105591,9.73615925 16.8743332,3.73615925 16,0 Z", id: "Antenna", fill: "#08754F" }), jsxRuntime.jsx("path", { d: "M38,0 C39.8048884,3.09304639 41.8048884,8.68897612 44,17.0526316 L41.75,18 C40.105591,9.73615925 38.8743332,3.73615925 38,0 Z", id: "Antenna", fill: "#08754F", transform: "translate(41.000000, 9.000000) scale(-1, 1) translate(-41.000000, -9.000000) " }), jsxRuntime.jsx("path", { d: "M30,9 L30,9 C37.1797017,9 43,14.8202983 43,22 L43,51 L17,51 L17,22 C17,14.8202983 22.8202983,9 30,9 Z", id: "Body", fill: "#78ADA0" }), jsxRuntime.jsx("circle", { id: "Eye", fill: "#F7EDA2", cx: "30", cy: "21", r: "6" }), jsxRuntime.jsx("rect", { id: "Controller-Stick", fill: "#2E3539", x: "4", y: "14", width: "2", height: "37" }), jsxRuntime.jsx("rect", { id: "Controller-Stick", fill: "#2E3539", x: "55", y: "20", width: "2", height: "31" }), jsxRuntime.jsx("circle", { id: "Controller-Knob", fill: "#2E3539", cx: "5", cy: "15", r: "5" }), jsxRuntime.jsx("circle", { id: "Controller-Knob", fill: "#2E3539", cx: "56", cy: "24", r: "5" }), jsxRuntime.jsx("ellipse", { id: "Pupil", fill: "#EF3838", cx: "30", cy: "21", rx: "2", ry: "3" }), jsxRuntime.jsx("path", { d: "M22,13.734623 L24.8490403,12 C26.6825156,15.3656655 33.3174844,15.3656655 35.1509597,12 L38,13.734623 C34.9018654,19.4217923 25.0981346,19.4217923 22,13.734623 Z", id: "Eyebrow", fill: "#232827", fillRule: "nonzero" }), jsxRuntime.jsxs("g", { id: "Smile", transform: "translate(24.000000, 29.000000)", children: [jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Mouth", fill: "#94231A", xlinkHref: `#${pathName}` }), jsxRuntime.jsx("ellipse", { id: "tongue", fill: "#EC7651", mask: `url(#${maskName})`, cx: "4.0625", cy: "12", rx: "4.0625", ry: "4" }), jsxRuntime.jsx("ellipse", { id: "tongue", fill: "#EC7651", mask: `url(#${maskName})`, cx: "8.9375", cy: "12", rx: "4.0625", ry: "4" }), jsxRuntime.jsx("rect", { id: "Teeth", fill: "#ECFAF7", mask: `url(#${maskName})`, x: "0", y: "0", width: "13", height: "3.2" })] }), jsxRuntime.jsx("circle", { id: "hand", fill: "#78ADA0", cx: "4", cy: "25", r: "4" }), jsxRuntime.jsx("circle", { id: "hand", fill: "#78ADA0", cx: "56", cy: "33", r: "4" })] }), jsxRuntime.jsx("rect", { id: "Bottom", fill: "#2E3539", x: "11", y: "46", width: "78", height: "6" })] }));
};
const TopPyramid = () => {
    const pieceId = 'Top/Pyramid';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("polygon", { id: pathName, points: "50 8 82 52 18 52" }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Triangle", fill: "#E1E6E8", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }), jsxRuntime.jsx("rect", { id: "Highlight", fillOpacity: "0.8", fill: "#FFFFFF", mask: `url(#${maskName})`, x: "50", y: "4", width: "30", height: "48" })] }));
};
const TopRadar = () => {
    const pieceId = 'Top/Radar';
    const pathName = `${pieceId}-path`;
    const maskName = `${pieceId}-mask`;
    return (jsxRuntime.jsxs("g", { id: pieceId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("path", { d: "M47.9411255,31.5810711 C46.4603547,30.7251846 45.0658376,29.6638174 43.7989899,28.3969696 C35.988504,20.5864838 35.988504,7.92318421 43.7989899,0.112698372 L57.2340187,13.5477272 L63.6870876,7.09465837 C62.7811534,5.56075283 62.987153,3.55195222 64.3050865,2.23401872 C65.8671837,0.671921549 68.3998436,0.671921549 69.9619408,2.23401872 C71.5240379,3.79611588 71.5240379,6.3287758 69.9619408,7.89087297 C68.6440073,9.20880647 66.6352067,9.41480612 65.1013011,8.50887193 L58.6482323,14.9619408 L72.0832611,28.3969696 C66.6329618,33.8472689 58.8195836,35.4942501 51.9411255,33.3379131 L51.9411255,52.1126984 L47.9411255,52.1126984 L47.9411255,31.5810711 Z", id: pathName }) }), jsxRuntime.jsx("mask", { id: maskName, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathName}` }) }), jsxRuntime.jsx("use", { id: "Radar", fill: "#E1E6E8", xlinkHref: `#${pathName}` }), jsxRuntime.jsx(TopColor, { maskID: maskName, children: jsxRuntime.jsx("rect", { x: "0", y: "0", width: "100", height: "52" }) }), jsxRuntime.jsx("path", { d: "M43.7989899,0.112698372 C35.988504,7.92318421 35.988504,20.5864838 43.7989899,28.3969696 C51.6094757,36.2074555 64.2727753,36.2074555 72.0832611,28.3969696", id: "Dish", fillOpacity: "0.2", fill: "#FFFFFF", mask: `url(#${maskName})` }), jsxRuntime.jsx("circle", { id: "Searching...", fillOpacity: "0.8", fill: "#FFFFFF", mask: `url(#${maskName})`, cx: "67.1335137", cy: "5.06244584", r: "4" })] }));
};
const topComponents = {
    Antenna: TopAntenna,
    AntennaCrooked: TopAntennaCrooked,
    Bulb01: TopBulb01,
    Bulb02: TopBulb02,
    GlowingBulb01: TopGlowingBulb01,
    GlowingBulb02: TopGlowingBulb02,
    Horns: TopHorns,
    Lights: TopLights,
    Plankton: TopPlankton,
    Pyramid: TopPyramid,
    Radar: TopRadar,
};
function Top() {
    const { topType = 'Bulb02' } = useBotContext();
    const TopComponent = topComponents[topType];
    if (!TopComponent) {
        console.warn(`Unknown top type: ${topType}`);
        return null;
    }
    return jsxRuntime.jsx(TopComponent, {});
}

function BotHead() {
    return (jsxRuntime.jsxs("g", { id: "Bottt/Head", stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", transform: "translate(30.000000, 33.000000)", children: [jsxRuntime.jsx("g", { id: "Sides", width: "180px", height: "76px", transform: "translate(0.000000, 66.000000)", children: jsxRuntime.jsx(Sides, {}) }), jsxRuntime.jsx("g", { id: "Top", transform: "translate(41.000000, 0.000000)", width: "100px", height: "52px", children: jsxRuntime.jsx(Top, {}) }), jsxRuntime.jsx("g", { id: "Face", transform: "translate(25.000000, 44.000000)", width: "130px", height: "120px", children: jsxRuntime.jsx(Face, {}) }), jsxRuntime.jsx("g", { id: "Mouth", transform: "translate(52.000000, 124.000000)", width: "76px", height: "32px", children: jsxRuntime.jsx(Mouth, {}) }), jsxRuntime.jsx("g", { id: "Eyes", transform: "translate(38.000000, 76.000000)", width: "104px", height: "48px", children: jsxRuntime.jsx(Eyes, {}) })] }));
}

function CircleBackground() {
    const { circleColor } = useBotContext();
    const mainId = 'Circle';
    const pathId = `${mainId}-path`;
    const maskId = `${mainId}-mask`;
    return (jsxRuntime.jsxs("g", { id: mainId, children: [jsxRuntime.jsx("defs", { children: jsxRuntime.jsx("circle", { id: pathId, cx: "120", cy: "120", r: "120" }) }), jsxRuntime.jsxs("g", { id: "Circle", strokeWidth: "1", fillRule: "evenodd", children: [jsxRuntime.jsx("mask", { id: maskId, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${pathId}` }) }), jsxRuntime.jsx("use", { id: "Circle-Background", fill: "#E6E6E6", xlinkHref: `#${pathId}` }), jsxRuntime.jsx(CircleColor, { maskID: maskId, color: circleColor, children: jsxRuntime.jsx("rect", { id: "Color", x: "0", y: "0", width: "240", height: "240" }) })] })] }));
}

const Bot = react.forwardRef(({ botStyle, circleColor, topType, topColor, faceType, faceColor, textureType, eyeType, mouthType, sideType, sidesColor, style, size = 240, className, }, ref) => {
    const botOptions = {
        botStyle,
        circleColor,
        topType,
        topColor,
        faceType,
        faceColor,
        textureType,
        eyeType,
        mouthType,
        sideType,
        sidesColor,
    };
    const isCircle = botStyle === 'Circle';
    const mainId = 'Bottt';
    const maskId = `${mainId}-mask`;
    return (jsxRuntime.jsx(BotProvider, { initialOptions: botOptions, children: jsxRuntime.jsxs("svg", { ref: ref, style: style, width: `${size}px`, height: `${size}px`, viewBox: "0 0 240 240", className: clsx('bottt-svg', className), xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", role: "img", "aria-label": "Bot avatar", children: [jsxRuntime.jsx("title", { children: "Bot Avatar" }), jsxRuntime.jsx("desc", { children: "Generated bot avatar using Bottts library" }), jsxRuntime.jsx("defs", { children: isCircle && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("circle", { id: `${mainId}-circle`, cx: "120", cy: "120", r: "120" }), jsxRuntime.jsx("mask", { id: maskId, fill: "white", children: jsxRuntime.jsx("use", { xlinkHref: `#${mainId}-circle` }) })] })) }), jsxRuntime.jsxs("g", { id: mainId, stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: [isCircle && jsxRuntime.jsx(CircleBackground, {}), jsxRuntime.jsx("g", { id: "Bottt-Content", mask: isCircle ? `url(#${maskId})` : undefined, children: jsxRuntime.jsx(BotHead, {}) })] })] }) }));
});
Bot.displayName = 'Bot';

const pieceComponents = {
    top: Top,
    face: Face,
    eye: Eyes,
    mouth: Mouth,
    sides: Sides,
};
const Piece = react.forwardRef(({ pieceType, pieceSize = 100, botStyle, circleColor, topType, topColor, faceType, faceColor, textureType, eyeType, mouthType, sideType, sidesColor, style, className, }, ref) => {
    const botOptions = {
        botStyle,
        circleColor,
        topType,
        topColor,
        faceType,
        faceColor,
        textureType,
        eyeType,
        mouthType,
        sideType,
        sidesColor,
    };
    const PieceComponent = pieceComponents[pieceType];
    const size = typeof pieceSize === 'string' ? parseInt(pieceSize, 10) : pieceSize;
    if (!PieceComponent) {
        console.warn(`Unknown piece type: ${pieceType}`);
        return null;
    }
    return (jsxRuntime.jsx(BotProvider, { initialOptions: botOptions, children: jsxRuntime.jsxs("svg", { ref: ref, style: style, width: `${size}px`, height: `${size}px`, viewBox: "0 0 100 100", className: clsx('bottt-piece', `bottt-piece--${pieceType}`, className), xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", role: "img", "aria-label": `Bot ${pieceType} piece`, children: [jsxRuntime.jsxs("title", { children: ["Bot ", pieceType, " piece"] }), jsxRuntime.jsxs("desc", { children: ["Individual bot piece: ", pieceType] }), jsxRuntime.jsx("g", { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd", children: jsxRuntime.jsx(PieceComponent, {}) })] }) }));
});
Piece.displayName = 'Piece';

exports.Bot = Bot;
exports.BotProvider = BotProvider;
exports.CircleColorComponent = CircleColor;
exports.Eyes = Eyes;
exports.Face = Face;
exports.Mouth = Mouth;
exports.Piece = Piece;
exports.Sides = Sides;
exports.Top = Top;
exports.default = Bot;
exports.useBotContext = useBotContext;
//# sourceMappingURL=index.cjs.map
